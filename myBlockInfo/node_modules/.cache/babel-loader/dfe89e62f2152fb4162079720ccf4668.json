{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = schnorrkelVerify;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name schnorrkelVerify\n * @description Verifies the signature of `message`, using the supplied pair\n */\n\n\nfunction schnorrkelVerify(message, signature, publicKey) {\n  var messageU8a = (0, _util.u8aToU8a)(message);\n  var publicKeyU8a = (0, _util.u8aToU8a)(publicKey);\n  var signatureU8a = (0, _util.u8aToU8a)(signature);\n  (0, _util.assert)(publicKeyU8a.length === 32, \"Invalid publicKey, received \".concat(publicKeyU8a.length, \" bytes, expected 32\"));\n  (0, _util.assert)(signatureU8a.length === 64, \"Invalid signature, received \".concat(signatureU8a.length, \" bytes, expected 64\"));\n  return (0, _wasmCrypto.sr25519Verify)(signatureU8a, messageU8a, publicKeyU8a);\n}","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/schnorrkel/verify.js"],"names":["Object","defineProperty","exports","value","default","schnorrkelVerify","_util","require","_wasmCrypto","message","signature","publicKey","messageU8a","u8aToU8a","publicKeyU8a","signatureU8a","assert","length","sr25519Verify"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,gBAAlB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,uBAAD,CAAzB,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,SAASF,gBAAT,CAA0BI,OAA1B,EAAmCC,SAAnC,EAA8CC,SAA9C,EAAyD;AACvD,MAAMC,UAAU,GAAG,CAAC,GAAGN,KAAK,CAACO,QAAV,EAAoBJ,OAApB,CAAnB;AACA,MAAMK,YAAY,GAAG,CAAC,GAAGR,KAAK,CAACO,QAAV,EAAoBF,SAApB,CAArB;AACA,MAAMI,YAAY,GAAG,CAAC,GAAGT,KAAK,CAACO,QAAV,EAAoBH,SAApB,CAArB;AACA,GAAC,GAAGJ,KAAK,CAACU,MAAV,EAAkBF,YAAY,CAACG,MAAb,KAAwB,EAA1C,wCAA6EH,YAAY,CAACG,MAA1F;AACA,GAAC,GAAGX,KAAK,CAACU,MAAV,EAAkBD,YAAY,CAACE,MAAb,KAAwB,EAA1C,wCAA6EF,YAAY,CAACE,MAA1F;AACA,SAAO,CAAC,GAAGT,WAAW,CAACU,aAAhB,EAA+BH,YAA/B,EAA6CH,UAA7C,EAAyDE,YAAzD,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = schnorrkelVerify;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name schnorrkelVerify\n * @description Verifies the signature of `message`, using the supplied pair\n */\nfunction schnorrkelVerify(message, signature, publicKey) {\n  const messageU8a = (0, _util.u8aToU8a)(message);\n  const publicKeyU8a = (0, _util.u8aToU8a)(publicKey);\n  const signatureU8a = (0, _util.u8aToU8a)(signature);\n  (0, _util.assert)(publicKeyU8a.length === 32, `Invalid publicKey, received ${publicKeyU8a.length} bytes, expected 32`);\n  (0, _util.assert)(signatureU8a.length === 64, `Invalid signature, received ${signatureU8a.length} bytes, expected 64`);\n  return (0, _wasmCrypto.sr25519Verify)(signatureU8a, messageU8a, publicKeyU8a);\n}"]},"metadata":{},"sourceType":"script"}