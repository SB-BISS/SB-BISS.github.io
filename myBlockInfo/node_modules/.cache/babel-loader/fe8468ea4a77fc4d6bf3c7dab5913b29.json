{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1Sign;\n\nvar _elliptic = require(\"elliptic\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _hasher = _interopRequireDefault(require(\"./hasher\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nvar ec = new _elliptic.ec('secp256k1');\n/**\n * @name secp256k1Sign\n * @description Returns message signature of `message`, using the supplied pair\n */\n\nfunction secp256k1Sign(message, _ref) {\n  var secretKey = _ref.secretKey;\n\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$hashType = _ref2.hashType,\n      hashType = _ref2$hashType === void 0 ? 'blake2' : _ref2$hashType;\n\n  (0, _util.assert)((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 32, 'Expected valid secp256k1 secretKey, 32-bytes');\n  var key = ec.keyFromPrivate(secretKey);\n  var ecsig = key.sign((0, _hasher.default)(hashType, message));\n  return (0, _util.u8aConcat)((0, _util.bnToU8a)(ecsig.r, {\n    bitLength: 256,\n    isLe: false\n  }), (0, _util.bnToU8a)(ecsig.s, {\n    bitLength: 256,\n    isLe: false\n  }), new Uint8Array([ecsig.recoveryParam || 0]));\n}","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/secp256k1/sign.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","secp256k1Sign","_elliptic","_util","_hasher","ec","message","secretKey","hashType","assert","length","key","keyFromPrivate","ecsig","sign","u8aConcat","bnToU8a","r","bitLength","isLe","s","Uint8Array","recoveryParam"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,aAAlB;;AAEA,IAAIC,SAAS,GAAGP,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAIQ,KAAK,GAAGR,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIS,OAAO,GAAGV,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC,C,CAEA;AACA;;;AACA,IAAMU,EAAE,GAAG,IAAIH,SAAS,CAACG,EAAd,CAAiB,WAAjB,CAAX;AACA;AACA;AACA;AACA;;AAEA,SAASJ,aAAT,CAAuBK,OAAvB,QAIQ;AAAA,MAHNC,SAGM,QAHNA,SAGM;;AAAA,kFAAJ,EAAI;AAAA,6BADNC,QACM;AAAA,MADNA,QACM,+BADK,QACL;;AACN,GAAC,GAAGL,KAAK,CAACM,MAAV,EAAkB,CAACF,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACG,MAAjE,MAA6E,EAA/F,EAAmG,8CAAnG;AACA,MAAMC,GAAG,GAAGN,EAAE,CAACO,cAAH,CAAkBL,SAAlB,CAAZ;AACA,MAAMM,KAAK,GAAGF,GAAG,CAACG,IAAJ,CAAS,CAAC,GAAGV,OAAO,CAACJ,OAAZ,EAAqBQ,QAArB,EAA+BF,OAA/B,CAAT,CAAd;AACA,SAAO,CAAC,GAAGH,KAAK,CAACY,SAAV,EAAqB,CAAC,GAAGZ,KAAK,CAACa,OAAV,EAAmBH,KAAK,CAACI,CAAzB,EAA4B;AACtDC,IAAAA,SAAS,EAAE,GAD2C;AAEtDC,IAAAA,IAAI,EAAE;AAFgD,GAA5B,CAArB,EAGH,CAAC,GAAGhB,KAAK,CAACa,OAAV,EAAmBH,KAAK,CAACO,CAAzB,EAA4B;AAC9BF,IAAAA,SAAS,EAAE,GADmB;AAE9BC,IAAAA,IAAI,EAAE;AAFwB,GAA5B,CAHG,EAMH,IAAIE,UAAJ,CAAe,CAACR,KAAK,CAACS,aAAN,IAAuB,CAAxB,CAAf,CANG,CAAP;AAOD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1Sign;\n\nvar _elliptic = require(\"elliptic\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _hasher = _interopRequireDefault(require(\"./hasher\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst ec = new _elliptic.ec('secp256k1');\n/**\n * @name secp256k1Sign\n * @description Returns message signature of `message`, using the supplied pair\n */\n\nfunction secp256k1Sign(message, {\n  secretKey\n}, {\n  hashType = 'blake2'\n} = {}) {\n  (0, _util.assert)((secretKey === null || secretKey === void 0 ? void 0 : secretKey.length) === 32, 'Expected valid secp256k1 secretKey, 32-bytes');\n  const key = ec.keyFromPrivate(secretKey);\n  const ecsig = key.sign((0, _hasher.default)(hashType, message));\n  return (0, _util.u8aConcat)((0, _util.bnToU8a)(ecsig.r, {\n    bitLength: 256,\n    isLe: false\n  }), (0, _util.bnToU8a)(ecsig.s, {\n    bitLength: 256,\n    isLe: false\n  }), new Uint8Array([ecsig.recoveryParam || 0]));\n}"]},"metadata":{},"sourceType":"script"}