{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utils = require(\"./utils\"); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction decodeJson(value) {\n  return Object.entries(value || {});\n}\n/**\n * @name Json\n * @description\n * Wraps the a JSON structure retrieve via RPC. It extends the standard JS Map with. While it\n * implements a Codec, it is limited in that it can only be used with input objects via RPC,\n * i.e. no hex decoding. Unlike a struct, this waps a JSON object with unknown keys\n * @noInheritDoc\n */\n\n\nclass StructAny extends Map {\n  constructor(registry, value) {\n    const decoded = decodeJson(value);\n    super(decoded);\n    this.registry = void 0;\n    this.registry = registry;\n    decoded.forEach(([key]) => {\n      (0, _util.isUndefined)(this[key]) && Object.defineProperty(this, key, {\n        enumerable: true,\n        get: () => this.get(key)\n      });\n    });\n  }\n  /**\n   * @description Always 0, never encodes as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return 0;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return [...this.keys()].length === 0;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _utils.compareMap)(this, other);\n  }\n  /**\n   * @description Unimplemented, will throw\n   */\n\n\n  toHex() {\n    throw new Error('Unimplemented');\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return [...this.entries()].reduce((json, [key, value]) => {\n      json[key] = value;\n      return json;\n    }, {});\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Json';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Unimplemented, will throw\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    throw new Error('Unimplemented');\n  }\n\n}\n\nexports.default = StructAny;","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/types/codec/Json.js"],"names":["Object","defineProperty","exports","value","default","_util","require","_utils","decodeJson","entries","StructAny","Map","constructor","registry","decoded","forEach","key","isUndefined","enumerable","get","encodedLength","hash","toU8a","isEmpty","keys","length","eq","other","compareMap","toHex","Error","toHuman","toJSON","reduce","json","toRawType","toString","JSON","stringify","isBare"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAApB,C,CAEA;AACA;;AAEA;;;AACA,SAASE,UAAT,CAAoBL,KAApB,EAA2B;AACzB,SAAOH,MAAM,CAACS,OAAP,CAAeN,KAAK,IAAI,EAAxB,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAMO,SAAN,SAAwBC,GAAxB,CAA4B;AAC1BC,EAAAA,WAAW,CAACC,QAAD,EAAWV,KAAX,EAAkB;AAC3B,UAAMW,OAAO,GAAGN,UAAU,CAACL,KAAD,CAA1B;AACA,UAAMW,OAAN;AACA,SAAKD,QAAL,GAAgB,KAAK,CAArB;AACA,SAAKA,QAAL,GAAgBA,QAAhB;AACAC,IAAAA,OAAO,CAACC,OAAR,CAAgB,CAAC,CAACC,GAAD,CAAD,KAAW;AACzB,OAAC,GAAGX,KAAK,CAACY,WAAV,EAAuB,KAAKD,GAAL,CAAvB,KAAqChB,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4Be,GAA5B,EAAiC;AACpEE,QAAAA,UAAU,EAAE,IADwD;AAEpEC,QAAAA,GAAG,EAAE,MAAM,KAAKA,GAAL,CAASH,GAAT;AAFyD,OAAjC,CAArC;AAID,KALD;AAMD;AACD;AACF;AACA;;;AAGE,MAAII,aAAJ,GAAoB;AAClB,WAAO,CAAP;AACD;AACD;AACF;AACA;;;AAGE,MAAIC,IAAJ,GAAW;AACT,WAAO,KAAKR,QAAL,CAAcQ,IAAd,CAAmB,KAAKC,KAAL,EAAnB,CAAP;AACD;AACD;AACF;AACA;;;AAGE,MAAIC,OAAJ,GAAc;AACZ,WAAO,CAAC,GAAG,KAAKC,IAAL,EAAJ,EAAiBC,MAAjB,KAA4B,CAAnC;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,EAAE,CAACC,KAAD,EAAQ;AACR,WAAO,CAAC,GAAGpB,MAAM,CAACqB,UAAX,EAAuB,IAAvB,EAA6BD,KAA7B,CAAP;AACD;AACD;AACF;AACA;;;AAGEE,EAAAA,KAAK,GAAG;AACN,UAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKC,MAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGEA,EAAAA,MAAM,GAAG;AACP,WAAO,CAAC,GAAG,KAAKvB,OAAL,EAAJ,EAAoBwB,MAApB,CAA2B,CAACC,IAAD,EAAO,CAAClB,GAAD,EAAMb,KAAN,CAAP,KAAwB;AACxD+B,MAAAA,IAAI,CAAClB,GAAD,CAAJ,GAAYb,KAAZ;AACA,aAAO+B,IAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID;AACD;AACF;AACA;;;AAGEC,EAAAA,SAAS,GAAG;AACV,WAAO,MAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,QAAQ,GAAG;AACT,WAAOC,IAAI,CAACC,SAAL,CAAe,KAAKN,MAAL,EAAf,CAAP;AACD;AACD;AACF;AACA;AACE;;;AAGAV,EAAAA,KAAK,CAACiB,MAAD,EAAS;AACZ,UAAM,IAAIT,KAAJ,CAAU,eAAV,CAAN;AACD;;AAhGyB;;AAoG5B5B,OAAO,CAACE,OAAR,GAAkBM,SAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _utils = require(\"./utils\");\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction decodeJson(value) {\n  return Object.entries(value || {});\n}\n/**\n * @name Json\n * @description\n * Wraps the a JSON structure retrieve via RPC. It extends the standard JS Map with. While it\n * implements a Codec, it is limited in that it can only be used with input objects via RPC,\n * i.e. no hex decoding. Unlike a struct, this waps a JSON object with unknown keys\n * @noInheritDoc\n */\n\n\nclass StructAny extends Map {\n  constructor(registry, value) {\n    const decoded = decodeJson(value);\n    super(decoded);\n    this.registry = void 0;\n    this.registry = registry;\n    decoded.forEach(([key]) => {\n      (0, _util.isUndefined)(this[key]) && Object.defineProperty(this, key, {\n        enumerable: true,\n        get: () => this.get(key)\n      });\n    });\n  }\n  /**\n   * @description Always 0, never encodes as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return 0;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return [...this.keys()].length === 0;\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    return (0, _utils.compareMap)(this, other);\n  }\n  /**\n   * @description Unimplemented, will throw\n   */\n\n\n  toHex() {\n    throw new Error('Unimplemented');\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman() {\n    return this.toJSON();\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return [...this.entries()].reduce((json, [key, value]) => {\n      json[key] = value;\n      return json;\n    }, {});\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return 'Json';\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Unimplemented, will throw\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    throw new Error('Unimplemented');\n  }\n\n}\n\nexports.default = StructAny;"]},"metadata":{},"sourceType":"script"}