{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.all = all;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nvar VESTING_ID = '0x76657374696e6720';\n\nfunction calcLocked(api, bestNumber, locks) {\n  var lockedBalance = api.registry.createType('Balance');\n  var lockedBreakdown = [];\n  var vestingLocked = api.registry.createType('Balance');\n  var allLocked = false;\n\n  if (Array.isArray(locks)) {\n    // only get the locks that are valid until passed the current block\n    lockedBreakdown = locks.filter(function (_ref) {\n      var until = _ref.until;\n      return !until || bestNumber && until.gt(bestNumber);\n    });\n    allLocked = lockedBreakdown.some(function (_ref2) {\n      var amount = _ref2.amount;\n      return amount.isMax();\n    });\n    vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(function (_ref3) {\n      var id = _ref3.id;\n      return id.eq(VESTING_ID);\n    }).reduce(function (result, _ref4) {\n      var amount = _ref4.amount;\n      return result.iadd(amount);\n    }, new _bn.default(0))); // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699\n\n    var notAll = lockedBreakdown.filter(function (_ref5) {\n      var amount = _ref5.amount;\n      return !amount.isMax();\n    });\n\n    if (notAll.length) {\n      lockedBalance = api.registry.createType('Balance', (0, _util.bnMax).apply(void 0, _toConsumableArray(notAll.map(function (_ref6) {\n        var amount = _ref6.amount;\n        return amount;\n      }))));\n    }\n  }\n\n  return {\n    allLocked: allLocked,\n    lockedBalance: lockedBalance,\n    lockedBreakdown: lockedBreakdown,\n    vestingLocked: vestingLocked\n  };\n}\n\nfunction calcBalances(api, _ref7) {\n  var _ref8 = _slicedToArray(_ref7, 3),\n      _ref8$ = _ref8[0],\n      accountId = _ref8$.accountId,\n      accountNonce = _ref8$.accountNonce,\n      freeBalance = _ref8$.freeBalance,\n      frozenFee = _ref8$.frozenFee,\n      frozenMisc = _ref8$.frozenMisc,\n      reservedBalance = _ref8$.reservedBalance,\n      votingBalance = _ref8$.votingBalance,\n      bestNumber = _ref8[1],\n      _ref8$2 = _slicedToArray(_ref8[2], 2),\n      vesting = _ref8$2[0],\n      locks = _ref8$2[1];\n\n  var _calcLocked = calcLocked(api, bestNumber, locks),\n      allLocked = _calcLocked.allLocked,\n      lockedBalance = _calcLocked.lockedBalance,\n      lockedBreakdown = _calcLocked.lockedBreakdown,\n      vestingLocked = _calcLocked.vestingLocked; // Calculate the vesting balances,\n  //  - offset = balance locked at startingBlock\n  //  - perBlock is the unlock amount\n\n\n  var _ref9 = vesting || api.registry.createType('VestingInfo'),\n      vestingTotal = _ref9.locked,\n      perBlock = _ref9.perBlock,\n      startingBlock = _ref9.startingBlock;\n\n  var isStarted = bestNumber.gt(startingBlock);\n  var vestedNow = isStarted ? perBlock.mul(bestNumber.sub(startingBlock)) : new _bn.default(0);\n  var vestedBalance = vestedNow.gt(vestingTotal) ? vestingTotal : api.registry.createType('Balance', vestedNow);\n  var isVesting = isStarted && !vestingLocked.isZero();\n  var vestedClaimable = api.registry.createType('Balance', isVesting ? vestingLocked.sub(vestingTotal.sub(vestedBalance)) : 0);\n  var availableBalance = api.registry.createType('Balance', allLocked ? 0 : (0, _util.bnMax)(new _bn.default(0), freeBalance.sub(lockedBalance)));\n  var vestingEndBlock = api.registry.createType('BlockNumber', isVesting ? vestingTotal.div(perBlock).add(startingBlock) : 0);\n  return {\n    accountId: accountId,\n    accountNonce: accountNonce,\n    availableBalance: availableBalance,\n    freeBalance: freeBalance,\n    frozenFee: frozenFee,\n    frozenMisc: frozenMisc,\n    isVesting: isVesting,\n    lockedBalance: lockedBalance,\n    lockedBreakdown: lockedBreakdown,\n    reservedBalance: reservedBalance,\n    vestedBalance: vestedBalance,\n    vestedClaimable: vestedClaimable,\n    vestingEndBlock: vestingEndBlock,\n    vestingLocked: vestingLocked,\n    vestingPerBlock: perBlock,\n    vestingTotal: vestingTotal,\n    votingBalance: votingBalance\n  };\n} // old\n\n\nfunction queryOld(api, accountId) {\n  return api.queryMulti([[api.query.balances.locks, accountId], [api.query.balances.vesting, accountId]]).pipe((0, _operators.map)(function (_ref10) {\n    var _ref11 = _slicedToArray(_ref10, 2),\n        locks = _ref11[0],\n        optVesting = _ref11[1];\n\n    var vestingNew = null;\n\n    if (optVesting.isSome) {\n      var _optVesting$unwrap = optVesting.unwrap(),\n          locked = _optVesting$unwrap.offset,\n          perBlock = _optVesting$unwrap.perBlock,\n          startingBlock = _optVesting$unwrap.startingBlock;\n\n      vestingNew = api.registry.createType('VestingInfo', {\n        locked: locked,\n        perBlock: perBlock,\n        startingBlock: startingBlock\n      });\n    }\n\n    return [vestingNew, locks];\n  }));\n} // current (balances  vesting)\n\n\nfunction queryCurrent(api, accountId) {\n  var _api$query$vesting;\n\n  return (((_api$query$vesting = api.query.vesting) === null || _api$query$vesting === void 0 ? void 0 : _api$query$vesting.vesting) ? api.queryMulti([[api.query.balances.locks, accountId], [api.query.vesting.vesting, accountId]]) : api.query.balances.locks(accountId).pipe((0, _operators.map)(function (locks) {\n    return [locks, api.registry.createType('Option<VestingInfo>')];\n  }))).pipe((0, _operators.map)(function (_ref12) {\n    var _ref13 = _slicedToArray(_ref12, 2),\n        locks = _ref13[0],\n        optVesting = _ref13[1];\n\n    return [optVesting.unwrapOr(null), locks];\n  }));\n}\n/**\n * @name all\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\n\n\nfunction all(instanceId, api) {\n  return (0, _util2.memo)(instanceId, function (address) {\n    return api.derive.balances.account(address).pipe((0, _operators.switchMap)(function (account) {\n      return !account.accountId.isEmpty ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(account), api.derive.chain.bestNumber(), (0, _util.isFunction)(api.query.system.account) || (0, _util.isFunction)(api.query.balances.account) ? queryCurrent(api, account.accountId) : queryOld(api, account.accountId)]) : (0, _rxjs.of)([account, api.registry.createType('BlockNumber'), [null, api.registry.createType('Vec<BalanceLock>')]]);\n    }), (0, _operators.map)(function (result) {\n      return calcBalances(api, result);\n    }));\n  });\n}","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/api-derive/balances/all.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","all","_bn","_rxjs","_operators","_util","_util2","VESTING_ID","calcLocked","api","bestNumber","locks","lockedBalance","registry","createType","lockedBreakdown","vestingLocked","allLocked","Array","isArray","filter","until","gt","some","amount","isMax","id","eq","reduce","result","iadd","default","notAll","length","bnMax","map","calcBalances","accountId","accountNonce","freeBalance","frozenFee","frozenMisc","reservedBalance","votingBalance","vesting","vestingTotal","locked","perBlock","startingBlock","isStarted","vestedNow","mul","sub","vestedBalance","isVesting","isZero","vestedClaimable","availableBalance","vestingEndBlock","div","add","vestingPerBlock","queryOld","queryMulti","query","balances","pipe","optVesting","vestingNew","isSome","unwrap","offset","queryCurrent","_api$query$vesting","unwrapOr","instanceId","memo","address","derive","account","switchMap","isEmpty","combineLatest","of","chain","isFunction","system"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.all = all;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst VESTING_ID = '0x76657374696e6720';\n\nfunction calcLocked(api, bestNumber, locks) {\n  let lockedBalance = api.registry.createType('Balance');\n  let lockedBreakdown = [];\n  let vestingLocked = api.registry.createType('Balance');\n  let allLocked = false;\n\n  if (Array.isArray(locks)) {\n    // only get the locks that are valid until passed the current block\n    lockedBreakdown = locks.filter(({\n      until\n    }) => !until || bestNumber && until.gt(bestNumber));\n    allLocked = lockedBreakdown.some(({\n      amount\n    }) => amount.isMax());\n    vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({\n      id\n    }) => id.eq(VESTING_ID)).reduce((result, {\n      amount\n    }) => result.iadd(amount), new _bn.default(0))); // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699\n\n    const notAll = lockedBreakdown.filter(({\n      amount\n    }) => !amount.isMax());\n\n    if (notAll.length) {\n      lockedBalance = api.registry.createType('Balance', (0, _util.bnMax)(...notAll.map(({\n        amount\n      }) => amount)));\n    }\n  }\n\n  return {\n    allLocked,\n    lockedBalance,\n    lockedBreakdown,\n    vestingLocked\n  };\n}\n\nfunction calcBalances(api, [{\n  accountId,\n  accountNonce,\n  freeBalance,\n  frozenFee,\n  frozenMisc,\n  reservedBalance,\n  votingBalance\n}, bestNumber, [vesting, locks]]) {\n  const {\n    allLocked,\n    lockedBalance,\n    lockedBreakdown,\n    vestingLocked\n  } = calcLocked(api, bestNumber, locks); // Calculate the vesting balances,\n  //  - offset = balance locked at startingBlock\n  //  - perBlock is the unlock amount\n\n  const {\n    locked: vestingTotal,\n    perBlock,\n    startingBlock\n  } = vesting || api.registry.createType('VestingInfo');\n  const isStarted = bestNumber.gt(startingBlock);\n  const vestedNow = isStarted ? perBlock.mul(bestNumber.sub(startingBlock)) : new _bn.default(0);\n  const vestedBalance = vestedNow.gt(vestingTotal) ? vestingTotal : api.registry.createType('Balance', vestedNow);\n  const isVesting = isStarted && !vestingLocked.isZero();\n  const vestedClaimable = api.registry.createType('Balance', isVesting ? vestingLocked.sub(vestingTotal.sub(vestedBalance)) : 0);\n  const availableBalance = api.registry.createType('Balance', allLocked ? 0 : (0, _util.bnMax)(new _bn.default(0), freeBalance.sub(lockedBalance)));\n  const vestingEndBlock = api.registry.createType('BlockNumber', isVesting ? vestingTotal.div(perBlock).add(startingBlock) : 0);\n  return {\n    accountId,\n    accountNonce,\n    availableBalance,\n    freeBalance,\n    frozenFee,\n    frozenMisc,\n    isVesting,\n    lockedBalance,\n    lockedBreakdown,\n    reservedBalance,\n    vestedBalance,\n    vestedClaimable,\n    vestingEndBlock,\n    vestingLocked,\n    vestingPerBlock: perBlock,\n    vestingTotal,\n    votingBalance\n  };\n} // old\n\n\nfunction queryOld(api, accountId) {\n  return api.queryMulti([[api.query.balances.locks, accountId], [api.query.balances.vesting, accountId]]).pipe((0, _operators.map)(([locks, optVesting]) => {\n    let vestingNew = null;\n\n    if (optVesting.isSome) {\n      const {\n        offset: locked,\n        perBlock,\n        startingBlock\n      } = optVesting.unwrap();\n      vestingNew = api.registry.createType('VestingInfo', {\n        locked,\n        perBlock,\n        startingBlock\n      });\n    }\n\n    return [vestingNew, locks];\n  }));\n} // current (balances  vesting)\n\n\nfunction queryCurrent(api, accountId) {\n  var _api$query$vesting;\n\n  return (((_api$query$vesting = api.query.vesting) === null || _api$query$vesting === void 0 ? void 0 : _api$query$vesting.vesting) ? api.queryMulti([[api.query.balances.locks, accountId], [api.query.vesting.vesting, accountId]]) : api.query.balances.locks(accountId).pipe((0, _operators.map)(locks => [locks, api.registry.createType('Option<VestingInfo>')]))).pipe((0, _operators.map)(([locks, optVesting]) => [optVesting.unwrapOr(null), locks]));\n}\n/**\n * @name all\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\n\n\nfunction all(instanceId, api) {\n  return (0, _util2.memo)(instanceId, address => api.derive.balances.account(address).pipe((0, _operators.switchMap)(account => !account.accountId.isEmpty ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(account), api.derive.chain.bestNumber(), (0, _util.isFunction)(api.query.system.account) || (0, _util.isFunction)(api.query.balances.account) ? queryCurrent(api, account.accountId) : queryOld(api, account.accountId)]) : (0, _rxjs.of)([account, api.registry.createType('BlockNumber'), [null, api.registry.createType('Vec<BalanceLock>')]])), (0, _operators.map)(result => calcBalances(api, result))));\n}"]},"metadata":{},"sourceType":"script"}