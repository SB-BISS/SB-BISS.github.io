{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.all = all;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst VESTING_ID = '0x76657374696e6720';\n\nfunction calcLocked(api, bestNumber, locks) {\n  let lockedBalance = api.registry.createType('Balance');\n  let lockedBreakdown = [];\n  let vestingLocked = api.registry.createType('Balance');\n  let allLocked = false;\n\n  if (Array.isArray(locks)) {\n    // only get the locks that are valid until passed the current block\n    lockedBreakdown = locks.filter(({\n      until\n    }) => !until || bestNumber && until.gt(bestNumber));\n    allLocked = lockedBreakdown.some(({\n      amount\n    }) => amount.isMax());\n    vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({\n      id\n    }) => id.eq(VESTING_ID)).reduce((result, {\n      amount\n    }) => result.iadd(amount), new _bn.default(0))); // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699\n\n    const notAll = lockedBreakdown.filter(({\n      amount\n    }) => !amount.isMax());\n\n    if (notAll.length) {\n      lockedBalance = api.registry.createType('Balance', (0, _util.bnMax)(...notAll.map(({\n        amount\n      }) => amount)));\n    }\n  }\n\n  return {\n    allLocked,\n    lockedBalance,\n    lockedBreakdown,\n    vestingLocked\n  };\n}\n\nfunction calcBalances(api, [{\n  accountId,\n  accountNonce,\n  freeBalance,\n  frozenFee,\n  frozenMisc,\n  reservedBalance,\n  votingBalance\n}, bestNumber, [vesting, locks]]) {\n  const {\n    allLocked,\n    lockedBalance,\n    lockedBreakdown,\n    vestingLocked\n  } = calcLocked(api, bestNumber, locks); // Calculate the vesting balances,\n  //  - offset = balance locked at startingBlock\n  //  - perBlock is the unlock amount\n\n  const {\n    locked: vestingTotal,\n    perBlock,\n    startingBlock\n  } = vesting || api.registry.createType('VestingInfo');\n  const isStarted = bestNumber.gt(startingBlock);\n  const vestedNow = isStarted ? perBlock.mul(bestNumber.sub(startingBlock)) : new _bn.default(0);\n  const vestedBalance = vestedNow.gt(vestingTotal) ? vestingTotal : api.registry.createType('Balance', vestedNow);\n  const isVesting = isStarted && !vestingLocked.isZero();\n  const vestedClaimable = api.registry.createType('Balance', isVesting ? vestingLocked.sub(vestingTotal.sub(vestedBalance)) : 0);\n  const availableBalance = api.registry.createType('Balance', allLocked ? 0 : (0, _util.bnMax)(new _bn.default(0), freeBalance.sub(lockedBalance)));\n  const vestingEndBlock = api.registry.createType('BlockNumber', isVesting ? vestingTotal.div(perBlock).add(startingBlock) : 0);\n  return {\n    accountId,\n    accountNonce,\n    availableBalance,\n    freeBalance,\n    frozenFee,\n    frozenMisc,\n    isVesting,\n    lockedBalance,\n    lockedBreakdown,\n    reservedBalance,\n    vestedBalance,\n    vestedClaimable,\n    vestingEndBlock,\n    vestingLocked,\n    vestingPerBlock: perBlock,\n    vestingTotal,\n    votingBalance\n  };\n} // old\n\n\nfunction queryOld(api, accountId) {\n  return api.queryMulti([[api.query.balances.locks, accountId], [api.query.balances.vesting, accountId]]).pipe((0, _operators.map)(([locks, optVesting]) => {\n    let vestingNew = null;\n\n    if (optVesting.isSome) {\n      const {\n        offset: locked,\n        perBlock,\n        startingBlock\n      } = optVesting.unwrap();\n      vestingNew = api.registry.createType('VestingInfo', {\n        locked,\n        perBlock,\n        startingBlock\n      });\n    }\n\n    return [vestingNew, locks];\n  }));\n} // current (balances  vesting)\n\n\nfunction queryCurrent(api, accountId) {\n  var _api$query$vesting;\n\n  return (((_api$query$vesting = api.query.vesting) === null || _api$query$vesting === void 0 ? void 0 : _api$query$vesting.vesting) ? api.queryMulti([[api.query.balances.locks, accountId], [api.query.vesting.vesting, accountId]]) : api.query.balances.locks(accountId).pipe((0, _operators.map)(locks => [locks, api.registry.createType('Option<VestingInfo>')]))).pipe((0, _operators.map)(([locks, optVesting]) => [optVesting.unwrapOr(null), locks]));\n}\n/**\n * @name all\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\n\n\nfunction all(instanceId, api) {\n  return (0, _util2.memo)(instanceId, address => api.derive.balances.account(address).pipe((0, _operators.switchMap)(account => !account.accountId.isEmpty ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(account), api.derive.chain.bestNumber(), (0, _util.isFunction)(api.query.system.account) || (0, _util.isFunction)(api.query.balances.account) ? queryCurrent(api, account.accountId) : queryOld(api, account.accountId)]) : (0, _rxjs.of)([account, api.registry.createType('BlockNumber'), [null, api.registry.createType('Vec<BalanceLock>')]])), (0, _operators.map)(result => calcBalances(api, result))));\n}","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/api-derive/balances/all.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","all","_bn","_rxjs","_operators","_util","_util2","VESTING_ID","calcLocked","api","bestNumber","locks","lockedBalance","registry","createType","lockedBreakdown","vestingLocked","allLocked","Array","isArray","filter","until","gt","some","amount","isMax","id","eq","reduce","result","iadd","default","notAll","length","bnMax","map","calcBalances","accountId","accountNonce","freeBalance","frozenFee","frozenMisc","reservedBalance","votingBalance","vesting","locked","vestingTotal","perBlock","startingBlock","isStarted","vestedNow","mul","sub","vestedBalance","isVesting","isZero","vestedClaimable","availableBalance","vestingEndBlock","div","add","vestingPerBlock","queryOld","queryMulti","query","balances","pipe","optVesting","vestingNew","isSome","offset","unwrap","queryCurrent","_api$query$vesting","unwrapOr","instanceId","memo","address","derive","account","switchMap","isEmpty","combineLatest","of","chain","isFunction","system"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.all = all;\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst VESTING_ID = '0x76657374696e6720';\n\nfunction calcLocked(api, bestNumber, locks) {\n  let lockedBalance = api.registry.createType('Balance');\n  let lockedBreakdown = [];\n  let vestingLocked = api.registry.createType('Balance');\n  let allLocked = false;\n\n  if (Array.isArray(locks)) {\n    // only get the locks that are valid until passed the current block\n    lockedBreakdown = locks.filter(({\n      until\n    }) => !until || bestNumber && until.gt(bestNumber));\n    allLocked = lockedBreakdown.some(({\n      amount\n    }) => amount.isMax());\n    vestingLocked = api.registry.createType('Balance', lockedBreakdown.filter(({\n      id\n    }) => id.eq(VESTING_ID)).reduce((result, {\n      amount\n    }) => result.iadd(amount), new _bn.default(0))); // get the maximum of the locks according to https://github.com/paritytech/substrate/blob/master/srml/balances/src/lib.rs#L699\n\n    const notAll = lockedBreakdown.filter(({\n      amount\n    }) => !amount.isMax());\n\n    if (notAll.length) {\n      lockedBalance = api.registry.createType('Balance', (0, _util.bnMax)(...notAll.map(({\n        amount\n      }) => amount)));\n    }\n  }\n\n  return {\n    allLocked,\n    lockedBalance,\n    lockedBreakdown,\n    vestingLocked\n  };\n}\n\nfunction calcBalances(api, [{\n  accountId,\n  accountNonce,\n  freeBalance,\n  frozenFee,\n  frozenMisc,\n  reservedBalance,\n  votingBalance\n}, bestNumber, [vesting, locks]]) {\n  const {\n    allLocked,\n    lockedBalance,\n    lockedBreakdown,\n    vestingLocked\n  } = calcLocked(api, bestNumber, locks); // Calculate the vesting balances,\n  //  - offset = balance locked at startingBlock\n  //  - perBlock is the unlock amount\n\n  const {\n    locked: vestingTotal,\n    perBlock,\n    startingBlock\n  } = vesting || api.registry.createType('VestingInfo');\n  const isStarted = bestNumber.gt(startingBlock);\n  const vestedNow = isStarted ? perBlock.mul(bestNumber.sub(startingBlock)) : new _bn.default(0);\n  const vestedBalance = vestedNow.gt(vestingTotal) ? vestingTotal : api.registry.createType('Balance', vestedNow);\n  const isVesting = isStarted && !vestingLocked.isZero();\n  const vestedClaimable = api.registry.createType('Balance', isVesting ? vestingLocked.sub(vestingTotal.sub(vestedBalance)) : 0);\n  const availableBalance = api.registry.createType('Balance', allLocked ? 0 : (0, _util.bnMax)(new _bn.default(0), freeBalance.sub(lockedBalance)));\n  const vestingEndBlock = api.registry.createType('BlockNumber', isVesting ? vestingTotal.div(perBlock).add(startingBlock) : 0);\n  return {\n    accountId,\n    accountNonce,\n    availableBalance,\n    freeBalance,\n    frozenFee,\n    frozenMisc,\n    isVesting,\n    lockedBalance,\n    lockedBreakdown,\n    reservedBalance,\n    vestedBalance,\n    vestedClaimable,\n    vestingEndBlock,\n    vestingLocked,\n    vestingPerBlock: perBlock,\n    vestingTotal,\n    votingBalance\n  };\n} // old\n\n\nfunction queryOld(api, accountId) {\n  return api.queryMulti([[api.query.balances.locks, accountId], [api.query.balances.vesting, accountId]]).pipe((0, _operators.map)(([locks, optVesting]) => {\n    let vestingNew = null;\n\n    if (optVesting.isSome) {\n      const {\n        offset: locked,\n        perBlock,\n        startingBlock\n      } = optVesting.unwrap();\n      vestingNew = api.registry.createType('VestingInfo', {\n        locked,\n        perBlock,\n        startingBlock\n      });\n    }\n\n    return [vestingNew, locks];\n  }));\n} // current (balances  vesting)\n\n\nfunction queryCurrent(api, accountId) {\n  var _api$query$vesting;\n\n  return (((_api$query$vesting = api.query.vesting) === null || _api$query$vesting === void 0 ? void 0 : _api$query$vesting.vesting) ? api.queryMulti([[api.query.balances.locks, accountId], [api.query.vesting.vesting, accountId]]) : api.query.balances.locks(accountId).pipe((0, _operators.map)(locks => [locks, api.registry.createType('Option<VestingInfo>')]))).pipe((0, _operators.map)(([locks, optVesting]) => [optVesting.unwrapOr(null), locks]));\n}\n/**\n * @name all\n * @param {( AccountIndex | AccountId | Address | string )} address - An accounts Id in different formats.\n * @returns An object containing the results of various balance queries\n * @example\n * <BR>\n *\n * ```javascript\n * const ALICE = 'F7Hs';\n *\n * api.derive.balances.all(ALICE, ({ accountId, lockedBalance }) => {\n *   console.log(`The account ${accountId} has a locked balance ${lockedBalance} units.`);\n * });\n * ```\n */\n\n\nfunction all(instanceId, api) {\n  return (0, _util2.memo)(instanceId, address => api.derive.balances.account(address).pipe((0, _operators.switchMap)(account => !account.accountId.isEmpty ? (0, _rxjs.combineLatest)([(0, _rxjs.of)(account), api.derive.chain.bestNumber(), (0, _util.isFunction)(api.query.system.account) || (0, _util.isFunction)(api.query.balances.account) ? queryCurrent(api, account.accountId) : queryOld(api, account.accountId)]) : (0, _rxjs.of)([account, api.registry.createType('BlockNumber'), [null, api.registry.createType('Vec<BalanceLock>')]])), (0, _operators.map)(result => calcBalances(api, result))));\n}"]},"metadata":{},"sourceType":"script"}