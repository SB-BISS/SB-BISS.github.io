{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = base32Decode;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _bs = require(\"./bs32\");\n\nvar _validate = _interopRequireDefault(require(\"./validate\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// adapted from https://github.com/multiformats/js-multibase/blob/424709195b46ffb1d6f2f69a7707598ebe751e5e/src/rfc4648.js\n// Build the character lookup table:\n\n\nvar LOOKUP = _bs.BASE32_ALPHABET.split('').reduce(function (lookup, char, index) {\n  lookup[char] = index;\n  return lookup;\n}, {});\n/** @internal */\n\n\nfunction decode(output, input, offset) {\n  var bits = 0;\n  var buffer = 0;\n  var written = 0;\n\n  for (var i = offset; i < input.length; i++) {\n    buffer = buffer << _bs.BITS_PER_CHAR | LOOKUP[input[i]];\n    bits += _bs.BITS_PER_CHAR;\n\n    if (bits >= 8) {\n      bits -= 8;\n      output[written++] = 0xff & buffer >> bits;\n    }\n  }\n\n  return [output, bits, buffer];\n}\n/**\n * @name base32Decode\n * @summary Delookup a base32 value.\n * @description\n * From the provided input, decode the base32 and return the result as an `Uint8Array`.\n */\n\n\nfunction base32Decode(value) {\n  var ipfsCompat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  (0, _validate.default)(value, ipfsCompat);\n  var offset = ipfsCompat ? 1 : 0;\n\n  var _decode = decode(new Uint8Array((value.length - offset) * _bs.BITS_PER_CHAR / 8 | 0), value, offset),\n      _decode2 = _slicedToArray(_decode, 3),\n      output = _decode2[0],\n      bits = _decode2[1],\n      buffer = _decode2[2];\n\n  (0, _util.assert)(!(bits >= _bs.BITS_PER_CHAR || 0xff & buffer << 8 - bits), 'Unexpected end of data');\n  return output;\n}","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/metadata/node_modules/@polkadot/util-crypto/base32/decode.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","base32Decode","_util","_bs","_validate","LOOKUP","BASE32_ALPHABET","split","reduce","lookup","char","index","decode","output","input","offset","bits","buffer","written","i","length","BITS_PER_CHAR","ipfsCompat","Uint8Array","assert"],"mappings":"AAAA;;;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,YAAlB;;AAEA,IAAIC,KAAK,GAAGP,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIQ,GAAG,GAAGR,OAAO,CAAC,QAAD,CAAjB;;AAEA,IAAIS,SAAS,GAAGV,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAtC,C,CAEA;AACA;AACA;AACA;;;AACA,IAAMU,MAAM,GAAGF,GAAG,CAACG,eAAJ,CAAoBC,KAApB,CAA0B,EAA1B,EAA8BC,MAA9B,CAAqC,UAACC,MAAD,EAASC,IAAT,EAAeC,KAAf,EAAyB;AAC3EF,EAAAA,MAAM,CAACC,IAAD,CAAN,GAAeC,KAAf;AACA,SAAOF,MAAP;AACD,CAHc,EAGZ,EAHY,CAAf;AAIA;;;AAGA,SAASG,MAAT,CAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuC;AACrC,MAAIC,IAAI,GAAG,CAAX;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,OAAO,GAAG,CAAd;;AAEA,OAAK,IAAIC,CAAC,GAAGJ,MAAb,EAAqBI,CAAC,GAAGL,KAAK,CAACM,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1CF,IAAAA,MAAM,GAAGA,MAAM,IAAId,GAAG,CAACkB,aAAd,GAA8BhB,MAAM,CAACS,KAAK,CAACK,CAAD,CAAN,CAA7C;AACAH,IAAAA,IAAI,IAAIb,GAAG,CAACkB,aAAZ;;AAEA,QAAIL,IAAI,IAAI,CAAZ,EAAe;AACbA,MAAAA,IAAI,IAAI,CAAR;AACAH,MAAAA,MAAM,CAACK,OAAO,EAAR,CAAN,GAAoB,OAAOD,MAAM,IAAID,IAArC;AACD;AACF;;AAED,SAAO,CAACH,MAAD,EAASG,IAAT,EAAeC,MAAf,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAAShB,YAAT,CAAsBF,KAAtB,EAAiD;AAAA,MAApBuB,UAAoB,uEAAP,KAAO;AAC/C,GAAC,GAAGlB,SAAS,CAACJ,OAAd,EAAuBD,KAAvB,EAA8BuB,UAA9B;AACA,MAAMP,MAAM,GAAGO,UAAU,GAAG,CAAH,GAAO,CAAhC;;AAF+C,gBAGhBV,MAAM,CAAC,IAAIW,UAAJ,CAAe,CAACxB,KAAK,CAACqB,MAAN,GAAeL,MAAhB,IAA0BZ,GAAG,CAACkB,aAA9B,GAA8C,CAA9C,GAAkD,CAAjE,CAAD,EAAsEtB,KAAtE,EAA6EgB,MAA7E,CAHU;AAAA;AAAA,MAGxCF,MAHwC;AAAA,MAGhCG,IAHgC;AAAA,MAG1BC,MAH0B;;AAI/C,GAAC,GAAGf,KAAK,CAACsB,MAAV,EAAkB,EAAER,IAAI,IAAIb,GAAG,CAACkB,aAAZ,IAA6B,OAAOJ,MAAM,IAAI,IAAID,IAApD,CAAlB,EAA6E,wBAA7E;AACA,SAAOH,MAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = base32Decode;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _bs = require(\"./bs32\");\n\nvar _validate = _interopRequireDefault(require(\"./validate\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n// adapted from https://github.com/multiformats/js-multibase/blob/424709195b46ffb1d6f2f69a7707598ebe751e5e/src/rfc4648.js\n// Build the character lookup table:\nconst LOOKUP = _bs.BASE32_ALPHABET.split('').reduce((lookup, char, index) => {\n  lookup[char] = index;\n  return lookup;\n}, {});\n/** @internal */\n\n\nfunction decode(output, input, offset) {\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n\n  for (let i = offset; i < input.length; i++) {\n    buffer = buffer << _bs.BITS_PER_CHAR | LOOKUP[input[i]];\n    bits += _bs.BITS_PER_CHAR;\n\n    if (bits >= 8) {\n      bits -= 8;\n      output[written++] = 0xff & buffer >> bits;\n    }\n  }\n\n  return [output, bits, buffer];\n}\n/**\n * @name base32Decode\n * @summary Delookup a base32 value.\n * @description\n * From the provided input, decode the base32 and return the result as an `Uint8Array`.\n */\n\n\nfunction base32Decode(value, ipfsCompat = false) {\n  (0, _validate.default)(value, ipfsCompat);\n  const offset = ipfsCompat ? 1 : 0;\n  const [output, bits, buffer] = decode(new Uint8Array((value.length - offset) * _bs.BITS_PER_CHAR / 8 | 0), value, offset);\n  (0, _util.assert)(!(bits >= _bs.BITS_PER_CHAR || 0xff & buffer << 8 - bits), 'Unexpected end of data');\n  return output;\n}"]},"metadata":{},"sourceType":"script"}