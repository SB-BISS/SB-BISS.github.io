{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = signatureVerify;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _decode = _interopRequireDefault(require(\"../address/decode\"));\n\nvar _verify = _interopRequireDefault(require(\"../nacl/verify\"));\n\nvar _verify2 = _interopRequireDefault(require(\"../schnorrkel/verify\"));\n\nvar _verify3 = _interopRequireDefault(require(\"../secp256k1/verify\")); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst secp256k1VerifyHasher = hashType => (message, signature, publicKey, isExpanded) => (0, _verify3.default)(message, signature, publicKey, {\n  hashType,\n  isExpanded\n});\n\nconst VERIFIERS_ECDSA = [['ecdsa', secp256k1VerifyHasher('blake2')], ['ethereum', secp256k1VerifyHasher('keccak')]];\nconst VERIFIERS = [['ed25519', _verify.default], ['sr25519', _verify2.default], ...VERIFIERS_ECDSA];\nconst CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa'];\n\nfunction verifyDetect(result, {\n  message,\n  publicKey,\n  signature\n}, isExpanded, verifiers = VERIFIERS) {\n  result.isValid = verifiers.some(([crypto, verify]) => {\n    try {\n      if (verify(message, signature, publicKey, isExpanded)) {\n        result.crypto = crypto;\n        return true;\n      }\n    } catch (error) {// do nothing, result.isValid still set to false\n    }\n\n    return false;\n  });\n  return result;\n}\n\nfunction verifyMultisig(result, {\n  message,\n  publicKey,\n  signature\n}, isExpanded) {\n  (0, _util.assert)([0, 1, 2].includes(signature[0]), `Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);\n  const type = CRYPTO_TYPES[signature[0]] || 'none';\n  result.crypto = type;\n\n  try {\n    result.isValid = {\n      ecdsa: () => verifyDetect(result, {\n        message,\n        publicKey,\n        signature: signature.subarray(1)\n      }, isExpanded, VERIFIERS_ECDSA).isValid,\n      ed25519: () => (0, _verify.default)(message, signature.subarray(1), publicKey),\n      none: () => {\n        throw Error('no verify for `none` crypto type');\n      },\n      sr25519: () => (0, _verify2.default)(message, signature.subarray(1), publicKey)\n    }[type]();\n  } catch (error) {// ignore, result.isValid still set to false\n  }\n\n  return result;\n}\n\nfunction signatureVerify(message, signature, addressOrPublicKey, isExpanded) {\n  const signatureU8a = (0, _util.u8aToU8a)(signature);\n  (0, _util.assert)([64, 65, 66].includes(signatureU8a.length), `Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);\n  const result = {\n    crypto: 'none',\n    isValid: false\n  };\n  const publicKey = (0, _decode.default)(addressOrPublicKey);\n  const input = {\n    message,\n    publicKey,\n    signature: signatureU8a\n  };\n  return [0, 1, 2].includes(signatureU8a[0]) && [65, 66].includes(signatureU8a.length) ? verifyMultisig(result, input, isExpanded) : verifyDetect(result, input, isExpanded);\n}","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/signature/verify.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","signatureVerify","_util","_decode","_verify","_verify2","_verify3","secp256k1VerifyHasher","hashType","message","signature","publicKey","isExpanded","VERIFIERS_ECDSA","VERIFIERS","CRYPTO_TYPES","verifyDetect","result","verifiers","isValid","some","crypto","verify","error","verifyMultisig","assert","includes","type","ecdsa","subarray","ed25519","none","Error","sr25519","addressOrPublicKey","signatureU8a","u8aToU8a","length","input"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = signatureVerify;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _decode = _interopRequireDefault(require(\"../address/decode\"));\n\nvar _verify = _interopRequireDefault(require(\"../nacl/verify\"));\n\nvar _verify2 = _interopRequireDefault(require(\"../schnorrkel/verify\"));\n\nvar _verify3 = _interopRequireDefault(require(\"../secp256k1/verify\"));\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst secp256k1VerifyHasher = hashType => (message, signature, publicKey, isExpanded) => (0, _verify3.default)(message, signature, publicKey, {\n  hashType,\n  isExpanded\n});\n\nconst VERIFIERS_ECDSA = [['ecdsa', secp256k1VerifyHasher('blake2')], ['ethereum', secp256k1VerifyHasher('keccak')]];\nconst VERIFIERS = [['ed25519', _verify.default], ['sr25519', _verify2.default], ...VERIFIERS_ECDSA];\nconst CRYPTO_TYPES = ['ed25519', 'sr25519', 'ecdsa'];\n\nfunction verifyDetect(result, {\n  message,\n  publicKey,\n  signature\n}, isExpanded, verifiers = VERIFIERS) {\n  result.isValid = verifiers.some(([crypto, verify]) => {\n    try {\n      if (verify(message, signature, publicKey, isExpanded)) {\n        result.crypto = crypto;\n        return true;\n      }\n    } catch (error) {// do nothing, result.isValid still set to false\n    }\n\n    return false;\n  });\n  return result;\n}\n\nfunction verifyMultisig(result, {\n  message,\n  publicKey,\n  signature\n}, isExpanded) {\n  (0, _util.assert)([0, 1, 2].includes(signature[0]), `Unknown crypto type, expected signature prefix [0..2], found ${signature[0]}`);\n  const type = CRYPTO_TYPES[signature[0]] || 'none';\n  result.crypto = type;\n\n  try {\n    result.isValid = {\n      ecdsa: () => verifyDetect(result, {\n        message,\n        publicKey,\n        signature: signature.subarray(1)\n      }, isExpanded, VERIFIERS_ECDSA).isValid,\n      ed25519: () => (0, _verify.default)(message, signature.subarray(1), publicKey),\n      none: () => {\n        throw Error('no verify for `none` crypto type');\n      },\n      sr25519: () => (0, _verify2.default)(message, signature.subarray(1), publicKey)\n    }[type]();\n  } catch (error) {// ignore, result.isValid still set to false\n  }\n\n  return result;\n}\n\nfunction signatureVerify(message, signature, addressOrPublicKey, isExpanded) {\n  const signatureU8a = (0, _util.u8aToU8a)(signature);\n  (0, _util.assert)([64, 65, 66].includes(signatureU8a.length), `Invalid signature length, expected [64..66] bytes, found ${signatureU8a.length}`);\n  const result = {\n    crypto: 'none',\n    isValid: false\n  };\n  const publicKey = (0, _decode.default)(addressOrPublicKey);\n  const input = {\n    message,\n    publicKey,\n    signature: signatureU8a\n  };\n  return [0, 1, 2].includes(signatureU8a[0]) && [65, 66].includes(signatureU8a.length) ? verifyMultisig(result, input, isExpanded) : verifyDetect(result, input, isExpanded);\n}"]},"metadata":{},"sourceType":"script"}