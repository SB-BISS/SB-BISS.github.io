{"ast":null,"code":"var _slicedToArray = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n// Copyright 2019-2020 @polkadot/wasm-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nvar asmFallback = require('./wasm/asm-empty');\n\nvar wasmBytes = require('./wasm/bytes');\n\nvar _require = require('./bridge'),\n    allocString = _require.allocString,\n    allocU8a = _require.allocU8a,\n    getWasm = _require.getWasm,\n    initWasm = _require.initWasm,\n    resultString = _require.resultString,\n    resultU8a = _require.resultU8a,\n    withWasm = _require.withWasm;\n\nvar imports = require('./imports');\n\nvar wasmPromise = initWasm(wasmBytes, asmFallback, imports).catch(function () {\n  return null;\n});\nmodule.exports.bip39Generate = withWasm(function (wasm, words) {\n  wasm.ext_bip39_generate(8, words);\n  return resultString();\n});\nmodule.exports.bip39ToEntropy = withWasm(function (wasm, phrase) {\n  var _allocString = allocString(phrase),\n      _allocString2 = _slicedToArray(_allocString, 2),\n      ptr0 = _allocString2[0],\n      len0 = _allocString2[1];\n\n  wasm.ext_bip39_to_entropy(8, ptr0, len0);\n  return resultU8a();\n});\nmodule.exports.bip39ToMiniSecret = withWasm(function (wasm, phrase, password) {\n  var _allocString3 = allocString(phrase),\n      _allocString4 = _slicedToArray(_allocString3, 2),\n      ptr0 = _allocString4[0],\n      len0 = _allocString4[1];\n\n  var _allocString5 = allocString(password),\n      _allocString6 = _slicedToArray(_allocString5, 2),\n      ptr1 = _allocString6[0],\n      len1 = _allocString6[1];\n\n  wasm.ext_bip39_to_mini_secret(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nmodule.exports.bip39ToSeed = withWasm(function (wasm, phrase, password) {\n  var _allocString7 = allocString(phrase),\n      _allocString8 = _slicedToArray(_allocString7, 2),\n      ptr0 = _allocString8[0],\n      len0 = _allocString8[1];\n\n  var _allocString9 = allocString(password),\n      _allocString10 = _slicedToArray(_allocString9, 2),\n      ptr1 = _allocString10[0],\n      len1 = _allocString10[1];\n\n  wasm.ext_bip39_to_seed(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nmodule.exports.bip39Validate = withWasm(function (wasm, phrase) {\n  var _allocString11 = allocString(phrase),\n      _allocString12 = _slicedToArray(_allocString11, 2),\n      ptr0 = _allocString12[0],\n      len0 = _allocString12[1];\n\n  var ret = wasm.ext_bip39_validate(ptr0, len0);\n  return ret !== 0;\n});\nmodule.exports.ed25519KeypairFromSeed = withWasm(function (wasm, seed) {\n  var _allocU8a = allocU8a(seed),\n      _allocU8a2 = _slicedToArray(_allocU8a, 2),\n      ptr0 = _allocU8a2[0],\n      len0 = _allocU8a2[1];\n\n  wasm.ext_ed_from_seed(8, ptr0, len0);\n  return resultU8a();\n});\nmodule.exports.ed25519Sign = withWasm(function (wasm, pubkey, seckey, message) {\n  var _allocU8a3 = allocU8a(pubkey),\n      _allocU8a4 = _slicedToArray(_allocU8a3, 2),\n      ptr0 = _allocU8a4[0],\n      len0 = _allocU8a4[1];\n\n  var _allocU8a5 = allocU8a(seckey),\n      _allocU8a6 = _slicedToArray(_allocU8a5, 2),\n      ptr1 = _allocU8a6[0],\n      len1 = _allocU8a6[1];\n\n  var _allocU8a7 = allocU8a(message),\n      _allocU8a8 = _slicedToArray(_allocU8a7, 2),\n      ptr2 = _allocU8a8[0],\n      len2 = _allocU8a8[1];\n\n  wasm.ext_ed_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n  return resultU8a();\n});\nmodule.exports.ed25519Verify = withWasm(function (wasm, signature, message, pubkey) {\n  var _allocU8a9 = allocU8a(signature),\n      _allocU8a10 = _slicedToArray(_allocU8a9, 2),\n      ptr0 = _allocU8a10[0],\n      len0 = _allocU8a10[1];\n\n  var _allocU8a11 = allocU8a(message),\n      _allocU8a12 = _slicedToArray(_allocU8a11, 2),\n      ptr1 = _allocU8a12[0],\n      len1 = _allocU8a12[1];\n\n  var _allocU8a13 = allocU8a(pubkey),\n      _allocU8a14 = _slicedToArray(_allocU8a13, 2),\n      ptr2 = _allocU8a14[0],\n      len2 = _allocU8a14[1];\n\n  var ret = wasm.ext_ed_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n  return ret !== 0;\n});\nmodule.exports.blake2b = withWasm(function (wasm, data, key, size) {\n  var _allocU8a15 = allocU8a(data),\n      _allocU8a16 = _slicedToArray(_allocU8a15, 2),\n      ptr0 = _allocU8a16[0],\n      len0 = _allocU8a16[1];\n\n  var _allocU8a17 = allocU8a(key),\n      _allocU8a18 = _slicedToArray(_allocU8a17, 2),\n      ptr1 = _allocU8a18[0],\n      len1 = _allocU8a18[1];\n\n  wasm.ext_blake2b(8, ptr0, len0, ptr1, len1, size);\n  return resultU8a();\n});\nmodule.exports.keccak256 = withWasm(function (wasm, data) {\n  var _allocU8a19 = allocU8a(data),\n      _allocU8a20 = _slicedToArray(_allocU8a19, 2),\n      ptr0 = _allocU8a20[0],\n      len0 = _allocU8a20[1];\n\n  wasm.ext_keccak256(8, ptr0, len0);\n  return resultU8a();\n});\nmodule.exports.pbkdf2 = withWasm(function (wasm, data, salt, rounds) {\n  var _allocU8a21 = allocU8a(data),\n      _allocU8a22 = _slicedToArray(_allocU8a21, 2),\n      ptr0 = _allocU8a22[0],\n      len0 = _allocU8a22[1];\n\n  var _allocU8a23 = allocU8a(salt),\n      _allocU8a24 = _slicedToArray(_allocU8a23, 2),\n      ptr1 = _allocU8a24[0],\n      len1 = _allocU8a24[1];\n\n  wasm.ext_pbkdf2(8, ptr0, len0, ptr1, len1, rounds);\n  return resultU8a();\n});\nmodule.exports.scrypt = withWasm(function (wasm, password, salt, log2n, r, p) {\n  var _allocU8a25 = allocU8a(password),\n      _allocU8a26 = _slicedToArray(_allocU8a25, 2),\n      ptr0 = _allocU8a26[0],\n      len0 = _allocU8a26[1];\n\n  var _allocU8a27 = allocU8a(salt),\n      _allocU8a28 = _slicedToArray(_allocU8a27, 2),\n      ptr1 = _allocU8a28[0],\n      len1 = _allocU8a28[1];\n\n  wasm.ext_scrypt(8, ptr0, len0, ptr1, len1, log2n, r, p);\n  return resultU8a();\n});\nmodule.exports.sha512 = withWasm(function (wasm, data) {\n  var _allocU8a29 = allocU8a(data),\n      _allocU8a30 = _slicedToArray(_allocU8a29, 2),\n      ptr0 = _allocU8a30[0],\n      len0 = _allocU8a30[1];\n\n  wasm.ext_sha512(8, ptr0, len0);\n  return resultU8a();\n});\nmodule.exports.twox = withWasm(function (wasm, data, rounds) {\n  var _allocU8a31 = allocU8a(data),\n      _allocU8a32 = _slicedToArray(_allocU8a31, 2),\n      ptr0 = _allocU8a32[0],\n      len0 = _allocU8a32[1];\n\n  wasm.ext_twox(8, ptr0, len0, rounds);\n  return resultU8a();\n});\nmodule.exports.sr25519DeriveKeypairHard = withWasm(function (wasm, pair, cc) {\n  var _allocU8a33 = allocU8a(pair),\n      _allocU8a34 = _slicedToArray(_allocU8a33, 2),\n      ptr0 = _allocU8a34[0],\n      len0 = _allocU8a34[1];\n\n  var _allocU8a35 = allocU8a(cc),\n      _allocU8a36 = _slicedToArray(_allocU8a35, 2),\n      ptr1 = _allocU8a36[0],\n      len1 = _allocU8a36[1];\n\n  wasm.ext_sr_derive_keypair_hard(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nmodule.exports.sr25519DeriveKeypairSoft = withWasm(function (wasm, pair, cc) {\n  var _allocU8a37 = allocU8a(pair),\n      _allocU8a38 = _slicedToArray(_allocU8a37, 2),\n      ptr0 = _allocU8a38[0],\n      len0 = _allocU8a38[1];\n\n  var _allocU8a39 = allocU8a(cc),\n      _allocU8a40 = _slicedToArray(_allocU8a39, 2),\n      ptr1 = _allocU8a40[0],\n      len1 = _allocU8a40[1];\n\n  wasm.ext_sr_derive_keypair_soft(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nmodule.exports.sr25519DerivePublicSoft = withWasm(function (wasm, pubkey, cc) {\n  var _allocU8a41 = allocU8a(pubkey),\n      _allocU8a42 = _slicedToArray(_allocU8a41, 2),\n      ptr0 = _allocU8a42[0],\n      len0 = _allocU8a42[1];\n\n  var _allocU8a43 = allocU8a(cc),\n      _allocU8a44 = _slicedToArray(_allocU8a43, 2),\n      ptr1 = _allocU8a44[0],\n      len1 = _allocU8a44[1];\n\n  wasm.ext_sr_derive_public_soft(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nmodule.exports.sr25519KeypairFromSeed = withWasm(function (wasm, seed) {\n  var _allocU8a45 = allocU8a(seed),\n      _allocU8a46 = _slicedToArray(_allocU8a45, 2),\n      ptr0 = _allocU8a46[0],\n      len0 = _allocU8a46[1];\n\n  wasm.ext_sr_from_seed(8, ptr0, len0);\n  return resultU8a();\n});\nmodule.exports.sr25519Sign = withWasm(function (wasm, pubkey, secret, message) {\n  var _allocU8a47 = allocU8a(pubkey),\n      _allocU8a48 = _slicedToArray(_allocU8a47, 2),\n      ptr0 = _allocU8a48[0],\n      len0 = _allocU8a48[1];\n\n  var _allocU8a49 = allocU8a(secret),\n      _allocU8a50 = _slicedToArray(_allocU8a49, 2),\n      ptr1 = _allocU8a50[0],\n      len1 = _allocU8a50[1];\n\n  var _allocU8a51 = allocU8a(message),\n      _allocU8a52 = _slicedToArray(_allocU8a51, 2),\n      ptr2 = _allocU8a52[0],\n      len2 = _allocU8a52[1];\n\n  wasm.ext_sr_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n  return resultU8a();\n});\nmodule.exports.sr25519Verify = withWasm(function (wasm, signature, message, pubkey) {\n  var _allocU8a53 = allocU8a(signature),\n      _allocU8a54 = _slicedToArray(_allocU8a53, 2),\n      ptr0 = _allocU8a54[0],\n      len0 = _allocU8a54[1];\n\n  var _allocU8a55 = allocU8a(message),\n      _allocU8a56 = _slicedToArray(_allocU8a55, 2),\n      ptr1 = _allocU8a56[0],\n      len1 = _allocU8a56[1];\n\n  var _allocU8a57 = allocU8a(pubkey),\n      _allocU8a58 = _slicedToArray(_allocU8a57, 2),\n      ptr2 = _allocU8a58[0],\n      len2 = _allocU8a58[1];\n\n  var ret = wasm.ext_sr_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n  return ret !== 0;\n});\n\nmodule.exports.isReady = function () {\n  return !!getWasm();\n};\n\nmodule.exports.waitReady = function () {\n  return wasmPromise.then(function () {\n    return !!getWasm();\n  });\n};","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/api-derive/node_modules/@polkadot/wasm-crypto/index.js"],"names":["asmFallback","require","wasmBytes","allocString","allocU8a","getWasm","initWasm","resultString","resultU8a","withWasm","imports","wasmPromise","catch","module","exports","bip39Generate","wasm","words","ext_bip39_generate","bip39ToEntropy","phrase","ptr0","len0","ext_bip39_to_entropy","bip39ToMiniSecret","password","ptr1","len1","ext_bip39_to_mini_secret","bip39ToSeed","ext_bip39_to_seed","bip39Validate","ret","ext_bip39_validate","ed25519KeypairFromSeed","seed","ext_ed_from_seed","ed25519Sign","pubkey","seckey","message","ptr2","len2","ext_ed_sign","ed25519Verify","signature","ext_ed_verify","blake2b","data","key","size","ext_blake2b","keccak256","ext_keccak256","pbkdf2","salt","rounds","ext_pbkdf2","scrypt","log2n","r","p","ext_scrypt","sha512","ext_sha512","twox","ext_twox","sr25519DeriveKeypairHard","pair","cc","ext_sr_derive_keypair_hard","sr25519DeriveKeypairSoft","ext_sr_derive_keypair_soft","sr25519DerivePublicSoft","ext_sr_derive_public_soft","sr25519KeypairFromSeed","ext_sr_from_seed","sr25519Sign","secret","ext_sr_sign","sr25519Verify","ext_sr_verify","isReady","waitReady","then"],"mappings":"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","sourcesContent":["// Copyright 2019-2020 @polkadot/wasm-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nconst asmFallback = require('./wasm/asm-empty');\nconst wasmBytes = require('./wasm/bytes');\nconst { allocString, allocU8a, getWasm, initWasm, resultString, resultU8a, withWasm } = require('./bridge');\nconst imports = require('./imports');\n\nconst wasmPromise = initWasm(wasmBytes, asmFallback, imports).catch(() => null);\n\nmodule.exports.bip39Generate = withWasm((wasm, words) => {\n  wasm.ext_bip39_generate(8, words);\n\n  return resultString();\n});\n\nmodule.exports.bip39ToEntropy = withWasm((wasm, phrase) => {\n  const [ptr0, len0] = allocString(phrase);\n\n  wasm.ext_bip39_to_entropy(8, ptr0, len0);\n\n  return resultU8a();\n});\n\nmodule.exports.bip39ToMiniSecret = withWasm((wasm, phrase, password) => {\n  const [ptr0, len0] = allocString(phrase);\n  const [ptr1, len1] = allocString(password);\n\n  wasm.ext_bip39_to_mini_secret(8, ptr0, len0, ptr1, len1);\n\n  return resultU8a();\n});\n\nmodule.exports.bip39ToSeed = withWasm((wasm, phrase, password) => {\n  const [ptr0, len0] = allocString(phrase);\n  const [ptr1, len1] = allocString(password);\n\n  wasm.ext_bip39_to_seed(8, ptr0, len0, ptr1, len1);\n\n  return resultU8a();\n});\n\nmodule.exports.bip39Validate = withWasm((wasm, phrase) => {\n  const [ptr0, len0] = allocString(phrase);\n  const ret = wasm.ext_bip39_validate(ptr0, len0);\n\n  return ret !== 0;\n});\n\nmodule.exports.ed25519KeypairFromSeed = withWasm((wasm, seed) => {\n  const [ptr0, len0] = allocU8a(seed);\n\n  wasm.ext_ed_from_seed(8, ptr0, len0);\n\n  return resultU8a();\n});\n\nmodule.exports.ed25519Sign = withWasm((wasm, pubkey, seckey, message) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(seckey);\n  const [ptr2, len2] = allocU8a(message);\n\n  wasm.ext_ed_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n\n  return resultU8a();\n});\n\nmodule.exports.ed25519Verify = withWasm((wasm, signature, message, pubkey) => {\n  const [ptr0, len0] = allocU8a(signature);\n  const [ptr1, len1] = allocU8a(message);\n  const [ptr2, len2] = allocU8a(pubkey);\n  const ret = wasm.ext_ed_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n\n  return ret !== 0;\n});\n\nmodule.exports.blake2b = withWasm((wasm, data, key, size) => {\n  const [ptr0, len0] = allocU8a(data);\n  const [ptr1, len1] = allocU8a(key);\n\n  wasm.ext_blake2b(8, ptr0, len0, ptr1, len1, size);\n\n  return resultU8a();\n});\n\nmodule.exports.keccak256 = withWasm((wasm, data) => {\n  const [ptr0, len0] = allocU8a(data);\n\n  wasm.ext_keccak256(8, ptr0, len0);\n\n  return resultU8a();\n});\n\nmodule.exports.pbkdf2 = withWasm((wasm, data, salt, rounds) => {\n  const [ptr0, len0] = allocU8a(data);\n  const [ptr1, len1] = allocU8a(salt);\n\n  wasm.ext_pbkdf2(8, ptr0, len0, ptr1, len1, rounds);\n\n  return resultU8a();\n});\n\nmodule.exports.scrypt = withWasm((wasm, password, salt, log2n, r, p) => {\n  const [ptr0, len0] = allocU8a(password);\n  const [ptr1, len1] = allocU8a(salt);\n\n  wasm.ext_scrypt(8, ptr0, len0, ptr1, len1, log2n, r, p);\n\n  return resultU8a();\n});\n\nmodule.exports.sha512 = withWasm((wasm, data) => {\n  const [ptr0, len0] = allocU8a(data);\n\n  wasm.ext_sha512(8, ptr0, len0);\n\n  return resultU8a();\n});\n\nmodule.exports.twox = withWasm((wasm, data, rounds) => {\n  const [ptr0, len0] = allocU8a(data);\n\n  wasm.ext_twox(8, ptr0, len0, rounds);\n\n  return resultU8a();\n});\n\nmodule.exports.sr25519DeriveKeypairHard = withWasm((wasm, pair, cc) => {\n  const [ptr0, len0] = allocU8a(pair);\n  const [ptr1, len1] = allocU8a(cc);\n\n  wasm.ext_sr_derive_keypair_hard(8, ptr0, len0, ptr1, len1);\n\n  return resultU8a();\n});\n\nmodule.exports.sr25519DeriveKeypairSoft = withWasm((wasm, pair, cc) => {\n  const [ptr0, len0] = allocU8a(pair);\n  const [ptr1, len1] = allocU8a(cc);\n\n  wasm.ext_sr_derive_keypair_soft(8, ptr0, len0, ptr1, len1);\n\n  return resultU8a();\n});\n\nmodule.exports.sr25519DerivePublicSoft = withWasm((wasm, pubkey, cc) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(cc);\n\n  wasm.ext_sr_derive_public_soft(8, ptr0, len0, ptr1, len1);\n\n  return resultU8a();\n});\n\nmodule.exports.sr25519KeypairFromSeed = withWasm((wasm, seed) => {\n  const [ptr0, len0] = allocU8a(seed);\n\n  wasm.ext_sr_from_seed(8, ptr0, len0);\n\n  return resultU8a();\n});\n\nmodule.exports.sr25519Sign = withWasm((wasm, pubkey, secret, message) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(secret);\n  const [ptr2, len2] = allocU8a(message);\n\n  wasm.ext_sr_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n\n  return resultU8a();\n});\n\nmodule.exports.sr25519Verify = withWasm((wasm, signature, message, pubkey) => {\n  const [ptr0, len0] = allocU8a(signature);\n  const [ptr1, len1] = allocU8a(message);\n  const [ptr2, len2] = allocU8a(pubkey);\n  const ret = wasm.ext_sr_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n\n  return ret !== 0;\n});\n\nmodule.exports.isReady = function () {\n  return !!getWasm();\n};\n\nmodule.exports.waitReady = function () {\n  return wasmPromise.then(() => !!getWasm());\n};\n"]},"metadata":{},"sourceType":"script"}