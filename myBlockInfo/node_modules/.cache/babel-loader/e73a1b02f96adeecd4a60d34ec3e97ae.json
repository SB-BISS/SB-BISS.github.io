{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1Recover;\n\nvar _elliptic = require(\"elliptic\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nvar ec = new _elliptic.ec('secp256k1');\n/**\n * @name secp256k1Recover\n * @description Recovers a publicKey from the supplied signature\n */\n\nfunction secp256k1Recover(message, signature, recovery) {\n  return new Uint8Array( // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n  ec.recoverPubKey(message, {\n    r: signature.slice(0, 32),\n    s: signature.slice(32, 64)\n  }, recovery).encode(null, true));\n}","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/secp256k1/recover.js"],"names":["Object","defineProperty","exports","value","default","secp256k1Recover","_elliptic","require","ec","message","signature","recovery","Uint8Array","recoverPubKey","r","slice","s","encode"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,gBAAlB;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,UAAD,CAAvB,C,CAEA;AACA;;;AACA,IAAMC,EAAE,GAAG,IAAIF,SAAS,CAACE,EAAd,CAAiB,WAAjB,CAAX;AACA;AACA;AACA;AACA;;AAEA,SAASH,gBAAT,CAA0BI,OAA1B,EAAmCC,SAAnC,EAA8CC,QAA9C,EAAwD;AACtD,SAAO,IAAIC,UAAJ,EAAgB;AACvBJ,EAAAA,EAAE,CAACK,aAAH,CAAiBJ,OAAjB,EAA0B;AACxBK,IAAAA,CAAC,EAAEJ,SAAS,CAACK,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,CADqB;AAExBC,IAAAA,CAAC,EAAEN,SAAS,CAACK,KAAV,CAAgB,EAAhB,EAAoB,EAApB;AAFqB,GAA1B,EAGGJ,QAHH,EAGaM,MAHb,CAGoB,IAHpB,EAG0B,IAH1B,CADO,CAAP;AAKD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1Recover;\n\nvar _elliptic = require(\"elliptic\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst ec = new _elliptic.ec('secp256k1');\n/**\n * @name secp256k1Recover\n * @description Recovers a publicKey from the supplied signature\n */\n\nfunction secp256k1Recover(message, signature, recovery) {\n  return new Uint8Array( // eslint-disable-next-line @typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n  ec.recoverPubKey(message, {\n    r: signature.slice(0, 32),\n    s: signature.slice(32, 64)\n  }, recovery).encode(null, true));\n}"]},"metadata":{},"sourceType":"script"}