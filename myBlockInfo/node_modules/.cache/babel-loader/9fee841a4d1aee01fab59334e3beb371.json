{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _get = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.DEFAULT_UINT_BITS = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nvar DEFAULT_UINT_BITS = 64;\nexports.DEFAULT_UINT_BITS = DEFAULT_UINT_BITS;\nvar MUL_P = new _bn.default(10000);\nvar FORMATTERS = [['Perquintill', new _bn.default(1000000000000)], ['Perbill', new _bn.default(1000000000)], ['Permill', new _bn.default(1000000)], ['Percent', new _bn.default(100)]];\n\nfunction toPercentage(value, divisor) {\n  return \"\".concat((value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2), \"%\");\n}\n/** @internal */\n\n\nfunction decodeAbstracIntU8a(value, bitLength, isNegative) {\n  if (!value.length) {\n    return '0';\n  }\n\n  try {\n    // NOTE When passing u8a in (typically from decoded data), it is always Little Endian\n    return (0, _util.u8aToBn)(value.subarray(0, bitLength / 8), {\n      isLe: true,\n      isNegative: isNegative\n    }).toString();\n  } catch (error) {\n    throw new Error(\"AbstractInt: failed on \".concat(JSON.stringify(value), \":: \").concat(error.message));\n  }\n}\n/** @internal */\n\n\nfunction decodeAbstractInt(value, bitLength, isNegative) {\n  // This function returns a string, which will be passed in the BN\n  // constructor. It would be ideal to actually return a BN, but there's a\n  // bug: https://github.com/indutny/bn.js/issues/206.\n  if ((0, _util.isHex)(value, -1, true)) {\n    return (0, _util.hexToBn)(value, {\n      isLe: false,\n      isNegative: isNegative\n    }).toString();\n  } else if ((0, _util.isU8a)(value)) {\n    return decodeAbstracIntU8a(value, bitLength, isNegative);\n  } else if ((0, _util.isString)(value)) {\n    return new _bn.default(value.toString(), 10).toString();\n  }\n\n  return (0, _util.bnToBn)(value).toString();\n}\n/**\n * @name AbstractInt\n * @ignore\n * @noInheritDoc\n */\n// TODO:\n//   - Apart from encoding/decoding we don't actually keep check on the sizes, is this good enough?\n\n\nvar _bitLength = (0, _classPrivateFieldLooseKey2.default)(\"bitLength\");\n\nvar _isSigned = (0, _classPrivateFieldLooseKey2.default)(\"isSigned\");\n\nvar AbstractInt = /*#__PURE__*/function (_bn$default) {\n  _inherits(AbstractInt, _bn$default);\n\n  var _super = _createSuper(AbstractInt);\n\n  function AbstractInt(registry) {\n    var _thisSuper, _thisSuper2, _this;\n\n    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var bitLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_UINT_BITS;\n    var isSigned = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n    _classCallCheck(this, AbstractInt);\n\n    _this = _super.call(this, decodeAbstractInt(value, bitLength, isSigned));\n    _this.registry = void 0;\n    Object.defineProperty(_assertThisInitialized(_this), _bitLength, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(_assertThisInitialized(_this), _isSigned, {\n      writable: true,\n      value: void 0\n    });\n    _this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(_assertThisInitialized(_this), _bitLength)[_bitLength] = bitLength;\n    (0, _classPrivateFieldLooseBase2.default)(_assertThisInitialized(_this), _isSigned)[_isSigned] = isSigned;\n    (0, _util.assert)(isSigned || _this.gte(_util.BN_ZERO), \"\".concat(_this.toRawType(), \": Negative number passed to unsigned type\"));\n    (0, _util.assert)(_get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(AbstractInt.prototype)), \"bitLength\", _thisSuper).call(_thisSuper) <= bitLength, \"\".concat(_this.toRawType(), \": Input too large. Found input with \").concat(_get((_thisSuper2 = _assertThisInitialized(_this), _getPrototypeOf(AbstractInt.prototype)), \"bitLength\", _thisSuper2).call(_thisSuper2), \" bits, expected \").concat(bitLength));\n    return _this;\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  _createClass(AbstractInt, [{\n    key: \"bitLength\",\n\n    /**\n     * @description Returns the number of bits in the value\n     */\n    value: function bitLength() {\n      return (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength];\n    }\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  }, {\n    key: \"eq\",\n    value: function eq(other) {\n      // Here we are actually overriding the built-in .eq to take care of both\n      // number and BN inputs (no `.eqn` needed) - numbers will be converted\n      return _get(_getPrototypeOf(AbstractInt.prototype), \"eq\", this).call(this, (0, _util.isHex)(other) ? (0, _util.hexToBn)(other.toString(), {\n        isLe: false,\n        isNegative: (0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned]\n      }) : (0, _util.bnToBn)(other));\n    }\n    /**\n     * @description True if this value is the max of the type\n     */\n\n  }, {\n    key: \"isMax\",\n    value: function isMax() {\n      var u8a = this.toU8a().filter(function (byte) {\n        return byte === 0xff;\n      });\n      return u8a.length === (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] / 8;\n    }\n    /**\n     * @description Returns a BigInt representation of the number\n     */\n\n  }, {\n    key: \"toBigInt\",\n    value: function toBigInt() {\n      return BigInt(this.toString());\n    }\n    /**\n     * @description Returns the BN representation of the number. (Compatibility)\n     */\n\n  }, {\n    key: \"toBn\",\n    value: function toBn() {\n      return this;\n    }\n    /**\n     * @description Returns a hex string representation of the value\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      var isLe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      // For display/JSON, this is BE, for compare, use isLe\n      return (0, _util.bnToHex)(this, {\n        bitLength: this.bitLength(),\n        isLe: isLe,\n        isNegative: !this.isUnsigned\n      });\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExpanded) {\n      var rawType = this.toRawType();\n\n      if (rawType === 'Balance') {\n        return this.isMax() ? 'everything' : (0, _util.formatBalance)(this, {\n          decimals: this.registry.chainDecimals,\n          withSi: true,\n          withUnit: this.registry.chainToken\n        });\n      }\n\n      var _ref = FORMATTERS.find(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            type = _ref4[0];\n\n        return type === rawType;\n      }) || [],\n          _ref2 = _slicedToArray(_ref, 2),\n          divisor = _ref2[1];\n\n      return divisor ? toPercentage(this, divisor) : (0, _util.formatNumber)(this);\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      // FIXME this return type should by string | number, but BN's return type\n      // is string.\n      // Maximum allowed integer for JS is 2^53 - 1, set limit at 52\n      return _get(_getPrototypeOf(AbstractInt.prototype), \"bitLength\", this).call(this) > 52 ? this.toHex() : this.toNumber();\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      // NOTE In the case of balances, which have a special meaning on the UI\n      // and can be interpreted differently, return a specific value for it so\n      // underlying it always matches (no matter which length it actually is)\n      return this instanceof this.registry.createClass('Balance') ? 'Balance' : \"\".concat(this.isUnsigned ? 'u' : 'i').concat(this.bitLength());\n    }\n    /**\n     * @description Returns the string representation of the value\n     * @param base The base to use for the conversion\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString(base) {\n      // only included here since we do not inherit docs\n      return _get(_getPrototypeOf(AbstractInt.prototype), \"toString\", this).call(this, base);\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      return (0, _util.bnToU8a)(this, {\n        bitLength: this.bitLength(),\n        isLe: true,\n        isNegative: !this.isUnsigned\n      });\n    }\n  }, {\n    key: \"encodedLength\",\n    get: function get() {\n      return (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] / 8;\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description Checks if the value is a zero value (align elsewhere)\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.isZero();\n    }\n    /**\n     * @description Checks if the value is an unsigned type\n     */\n\n  }, {\n    key: \"isUnsigned\",\n    get: function get() {\n      return !(0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned];\n    }\n  }]);\n\n  return AbstractInt;\n}(_bn.default);\n\nexports.default = AbstractInt;","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/types/codec/AbstractInt.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","DEFAULT_UINT_BITS","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_bn","_util","MUL_P","FORMATTERS","toPercentage","divisor","mul","div","toNumber","toFixed","decodeAbstracIntU8a","bitLength","isNegative","length","u8aToBn","subarray","isLe","toString","error","Error","JSON","stringify","message","decodeAbstractInt","isHex","hexToBn","isU8a","isString","bnToBn","_bitLength","_isSigned","AbstractInt","registry","isSigned","writable","assert","gte","BN_ZERO","toRawType","other","u8a","toU8a","filter","byte","BigInt","bnToHex","isUnsigned","isExpanded","rawType","isMax","formatBalance","decimals","chainDecimals","withSi","withUnit","chainToken","find","type","formatNumber","toHex","createClass","base","isBare","bnToU8a","hash","isZero"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.DEFAULT_UINT_BITS = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _util = require(\"@polkadot/util\");\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst DEFAULT_UINT_BITS = 64;\nexports.DEFAULT_UINT_BITS = DEFAULT_UINT_BITS;\nconst MUL_P = new _bn.default(10000);\nconst FORMATTERS = [['Perquintill', new _bn.default(1000000000000)], ['Perbill', new _bn.default(1000000000)], ['Permill', new _bn.default(1000000)], ['Percent', new _bn.default(100)]];\n\nfunction toPercentage(value, divisor) {\n  return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;\n}\n/** @internal */\n\n\nfunction decodeAbstracIntU8a(value, bitLength, isNegative) {\n  if (!value.length) {\n    return '0';\n  }\n\n  try {\n    // NOTE When passing u8a in (typically from decoded data), it is always Little Endian\n    return (0, _util.u8aToBn)(value.subarray(0, bitLength / 8), {\n      isLe: true,\n      isNegative\n    }).toString();\n  } catch (error) {\n    throw new Error(`AbstractInt: failed on ${JSON.stringify(value)}:: ${error.message}`);\n  }\n}\n/** @internal */\n\n\nfunction decodeAbstractInt(value, bitLength, isNegative) {\n  // This function returns a string, which will be passed in the BN\n  // constructor. It would be ideal to actually return a BN, but there's a\n  // bug: https://github.com/indutny/bn.js/issues/206.\n  if ((0, _util.isHex)(value, -1, true)) {\n    return (0, _util.hexToBn)(value, {\n      isLe: false,\n      isNegative\n    }).toString();\n  } else if ((0, _util.isU8a)(value)) {\n    return decodeAbstracIntU8a(value, bitLength, isNegative);\n  } else if ((0, _util.isString)(value)) {\n    return new _bn.default(value.toString(), 10).toString();\n  }\n\n  return (0, _util.bnToBn)(value).toString();\n}\n/**\n * @name AbstractInt\n * @ignore\n * @noInheritDoc\n */\n// TODO:\n//   - Apart from encoding/decoding we don't actually keep check on the sizes, is this good enough?\n\n\nvar _bitLength = (0, _classPrivateFieldLooseKey2.default)(\"bitLength\");\n\nvar _isSigned = (0, _classPrivateFieldLooseKey2.default)(\"isSigned\");\n\nclass AbstractInt extends _bn.default {\n  constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {\n    super(decodeAbstractInt(value, bitLength, isSigned));\n    this.registry = void 0;\n    Object.defineProperty(this, _bitLength, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isSigned, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] = bitLength;\n    (0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned] = isSigned;\n    (0, _util.assert)(isSigned || this.gte(_util.BN_ZERO), `${this.toRawType()}: Negative number passed to unsigned type`);\n    (0, _util.assert)(super.bitLength() <= bitLength, `${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${bitLength}`);\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] / 8;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is a zero value (align elsewhere)\n   */\n\n\n  get isEmpty() {\n    return this.isZero();\n  }\n  /**\n   * @description Checks if the value is an unsigned type\n   */\n\n\n  get isUnsigned() {\n    return !(0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned];\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n\n\n  bitLength() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength];\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  eq(other) {\n    // Here we are actually overriding the built-in .eq to take care of both\n    // number and BN inputs (no `.eqn` needed) - numbers will be converted\n    return super.eq((0, _util.isHex)(other) ? (0, _util.hexToBn)(other.toString(), {\n      isLe: false,\n      isNegative: (0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned]\n    }) : (0, _util.bnToBn)(other));\n  }\n  /**\n   * @description True if this value is the max of the type\n   */\n\n\n  isMax() {\n    const u8a = this.toU8a().filter(byte => byte === 0xff);\n    return u8a.length === (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] / 8;\n  }\n  /**\n   * @description Returns a BigInt representation of the number\n   */\n\n\n  toBigInt() {\n    return BigInt(this.toString());\n  }\n  /**\n   * @description Returns the BN representation of the number. (Compatibility)\n   */\n\n\n  toBn() {\n    return this;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex(isLe = false) {\n    // For display/JSON, this is BE, for compare, use isLe\n    return (0, _util.bnToHex)(this, {\n      bitLength: this.bitLength(),\n      isLe,\n      isNegative: !this.isUnsigned\n    });\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toHuman(isExpanded) {\n    const rawType = this.toRawType();\n\n    if (rawType === 'Balance') {\n      return this.isMax() ? 'everything' : (0, _util.formatBalance)(this, {\n        decimals: this.registry.chainDecimals,\n        withSi: true,\n        withUnit: this.registry.chainToken\n      });\n    }\n\n    const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];\n    return divisor ? toPercentage(this, divisor) : (0, _util.formatNumber)(this);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    // FIXME this return type should by string | number, but BN's return type\n    // is string.\n    // Maximum allowed integer for JS is 2^53 - 1, set limit at 52\n    return super.bitLength() > 52 ? this.toHex() : this.toNumber();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    // NOTE In the case of balances, which have a special meaning on the UI\n    // and can be interpreted differently, return a specific value for it so\n    // underlying it always matches (no matter which length it actually is)\n    return this instanceof this.registry.createClass('Balance') ? 'Balance' : `${this.isUnsigned ? 'u' : 'i'}${this.bitLength()}`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   * @param base The base to use for the conversion\n   */\n\n\n  toString(base) {\n    // only included here since we do not inherit docs\n    return super.toString(base);\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return (0, _util.bnToU8a)(this, {\n      bitLength: this.bitLength(),\n      isLe: true,\n      isNegative: !this.isUnsigned\n    });\n  }\n\n}\n\nexports.default = AbstractInt;"]},"metadata":{},"sourceType":"script"}