{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = base32Validate;\n\nvar _validate = require(\"../base58/validate\");\n\nvar _bs = require(\"./bs32\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nvar BASE_CONFIG = {\n  alphabet: _bs.BASE32_ALPHABET,\n  ipfsChar: 'b',\n  type: 'base32'\n};\n/**\n * @name base32Validate\n * @summary Validates a base32 value.\n * @description\n * Validates the the supplied value is valid base32\n */\n\nfunction base32Validate(value, ipfsCompat) {\n  return (0, _validate.validateChars)(BASE_CONFIG, value, ipfsCompat);\n}","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/api-derive/node_modules/@polkadot/util-crypto/base32/validate.js"],"names":["Object","defineProperty","exports","value","default","base32Validate","_validate","require","_bs","BASE_CONFIG","alphabet","BASE32_ALPHABET","ipfsChar","type","ipfsCompat","validateChars"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,cAAlB;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,oBAAD,CAAvB;;AAEA,IAAIC,GAAG,GAAGD,OAAO,CAAC,QAAD,CAAjB,C,CAEA;AACA;;;AACA,IAAME,WAAW,GAAG;AAClBC,EAAAA,QAAQ,EAAEF,GAAG,CAACG,eADI;AAElBC,EAAAA,QAAQ,EAAE,GAFQ;AAGlBC,EAAAA,IAAI,EAAE;AAHY,CAApB;AAKA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASR,cAAT,CAAwBF,KAAxB,EAA+BW,UAA/B,EAA2C;AACzC,SAAO,CAAC,GAAGR,SAAS,CAACS,aAAd,EAA6BN,WAA7B,EAA0CN,KAA1C,EAAiDW,UAAjD,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = base32Validate;\n\nvar _validate = require(\"../base58/validate\");\n\nvar _bs = require(\"./bs32\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst BASE_CONFIG = {\n  alphabet: _bs.BASE32_ALPHABET,\n  ipfsChar: 'b',\n  type: 'base32'\n};\n/**\n * @name base32Validate\n * @summary Validates a base32 value.\n * @description\n * Validates the the supplied value is valid base32\n */\n\nfunction base32Validate(value, ipfsCompat) {\n  return (0, _validate.validateChars)(BASE_CONFIG, value, ipfsCompat);\n}"]},"metadata":{},"sourceType":"script"}