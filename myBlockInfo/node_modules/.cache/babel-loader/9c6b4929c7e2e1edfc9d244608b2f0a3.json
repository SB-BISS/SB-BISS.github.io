{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toLegacy;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\nvar _bip = require(\"./bip39\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name toSeed\n * @summary Creates a valid Ethereum/Bitcoin-compatible seed from a mnemonic input\n * @example\n * <BR>\n *\n * ```javascript\n * import { mnemonicGenerate, mnemonicToBip39, mnemonicValidate } from '@polkadot/util-crypto';\n *\n * const mnemonic = mnemonicGenerate(); // => string\n * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean\n *\n * if (isValidMnemonic) {\n *   console.log(`Seed generated from mnemonic: ${mnemonicToBip39(mnemonic)}`); => u8a\n * }\n * ```\n */\n\n\nfunction toLegacy(mnemonic, password = '', onlyJs = false) {\n  return (0, _wasmCrypto.isReady)() && !onlyJs ? (0, _wasmCrypto.bip39ToSeed)(mnemonic, password) : (0, _util.bufferToU8a)((0, _bip.mnemonicToSeedSync)(mnemonic, password)).subarray(0, 32);\n}","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/mnemonic/toLegacySeed.js"],"names":["Object","defineProperty","exports","value","default","toLegacy","_util","require","_wasmCrypto","_bip","mnemonic","password","onlyJs","isReady","bip39ToSeed","bufferToU8a","mnemonicToSeedSync","subarray"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,QAAlB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,uBAAD,CAAzB;;AAEA,IAAIE,IAAI,GAAGF,OAAO,CAAC,SAAD,CAAlB,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,QAAT,CAAkBK,QAAlB,EAA4BC,QAAQ,GAAG,EAAvC,EAA2CC,MAAM,GAAG,KAApD,EAA2D;AACzD,SAAO,CAAC,GAAGJ,WAAW,CAACK,OAAhB,OAA8B,CAACD,MAA/B,GAAwC,CAAC,GAAGJ,WAAW,CAACM,WAAhB,EAA6BJ,QAA7B,EAAuCC,QAAvC,CAAxC,GAA2F,CAAC,GAAGL,KAAK,CAACS,WAAV,EAAuB,CAAC,GAAGN,IAAI,CAACO,kBAAT,EAA6BN,QAA7B,EAAuCC,QAAvC,CAAvB,EAAyEM,QAAzE,CAAkF,CAAlF,EAAqF,EAArF,CAAlG;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toLegacy;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _wasmCrypto = require(\"@polkadot/wasm-crypto\");\n\nvar _bip = require(\"./bip39\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @name toSeed\n * @summary Creates a valid Ethereum/Bitcoin-compatible seed from a mnemonic input\n * @example\n * <BR>\n *\n * ```javascript\n * import { mnemonicGenerate, mnemonicToBip39, mnemonicValidate } from '@polkadot/util-crypto';\n *\n * const mnemonic = mnemonicGenerate(); // => string\n * const isValidMnemonic = mnemonicValidate(mnemonic); // => boolean\n *\n * if (isValidMnemonic) {\n *   console.log(`Seed generated from mnemonic: ${mnemonicToBip39(mnemonic)}`); => u8a\n * }\n * ```\n */\nfunction toLegacy(mnemonic, password = '', onlyJs = false) {\n  return (0, _wasmCrypto.isReady)() && !onlyJs ? (0, _wasmCrypto.bip39ToSeed)(mnemonic, password) : (0, _util.bufferToU8a)((0, _bip.mnemonicToSeedSync)(mnemonic, password)).subarray(0, 32);\n}"]},"metadata":{},"sourceType":"script"}