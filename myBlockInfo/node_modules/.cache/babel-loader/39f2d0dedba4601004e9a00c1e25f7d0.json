{"ast":null,"code":"\"use strict\";\n\nvar _assertThisInitialized = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _defineProperty = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Null = _interopRequireDefault(require(\"../primitive/Null\"));\n\nvar _utils = require(\"./utils\");\n\nvar _Struct = _interopRequireDefault(require(\"./Struct\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nfunction extractDef(registry, _def) {\n  if (!Array.isArray(_def)) {\n    var def = (0, _utils.mapToTypeMap)(registry, _def);\n    var isBasic = !Object.values(def).some(function (type) {\n      return type !== _Null.default;\n    });\n    return {\n      def: def,\n      isBasic: isBasic\n    };\n  }\n\n  return {\n    def: _def.reduce(function (def, key) {\n      def[key] = _Null.default;\n      return def;\n    }, {}),\n    isBasic: true\n  };\n}\n\nfunction createFromValue(registry, def) {\n  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var value = arguments.length > 3 ? arguments[3] : undefined;\n  var Clazz = Object.values(def)[index];\n  (0, _util.assert)(!(0, _util.isUndefined)(Clazz), \"Unable to create Enum via index \".concat(index, \", in \").concat(Object.keys(def).join(', ')));\n  return {\n    index: index,\n    value: value instanceof Clazz ? value : new Clazz(registry, value)\n  };\n}\n\nfunction decodeFromJSON(registry, def, key, value) {\n  // JSON comes in the form of { \"<type (lowercased)>\": \"<value for type>\" }, here we\n  // additionally force to lower to ensure forward compat\n  var keys = Object.keys(def).map(function (k) {\n    return k.toLowerCase();\n  });\n  var keyLower = key.toLowerCase();\n  var index = keys.indexOf(keyLower);\n  (0, _util.assert)(index !== -1, \"Cannot map Enum JSON, unable to find '\".concat(key, \"' in \").concat(keys.join(', ')));\n\n  try {\n    return createFromValue(registry, def, index, value);\n  } catch (error) {\n    throw new Error(\"Enum(\".concat(key, \"):: \").concat(error.message));\n  }\n}\n\nfunction decodeFromString(registry, def, value) {\n  return (0, _util.isHex)(value) // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  ? decodeFromValue(registry, def, (0, _util.hexToU8a)(value)) : decodeFromJSON(registry, def, value);\n}\n\nfunction decodeFromValue(registry, def, value) {\n  if ((0, _util.isU8a)(value)) {\n    return createFromValue(registry, def, value[0], value.subarray(1));\n  } else if ((0, _util.isNumber)(value)) {\n    return createFromValue(registry, def, value);\n  } else if ((0, _util.isString)(value)) {\n    return decodeFromString(registry, def, value.toString());\n  } else if ((0, _util.isObject)(value)) {\n    var key = Object.keys(value)[0];\n    return decodeFromJSON(registry, def, key, value[key]);\n  } // Worst-case scenario, return the first with default\n\n\n  return createFromValue(registry, def, 0);\n}\n\nfunction decodeEnum(registry, def, value, index) {\n  // NOTE We check the index path first, before looking at values - this allows treating\n  // the optional indexes before anything else, more-specific > less-specific\n  if ((0, _util.isNumber)(index)) {\n    return createFromValue(registry, def, index, value); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  } else if (value instanceof Enum) {\n    return createFromValue(registry, def, value.index, value.value);\n  } // Or else, we just look at `value`\n\n\n  return decodeFromValue(registry, def, value);\n}\n/**\n * @name Enum\n * @description\n * This implements an enum, that based on the value wraps a different type. It is effectively\n * an extension to enum where the value type is determined by the actual index.\n */\n// TODO:\n//   - As per Enum, actually use TS enum\n//   - It should rather probably extend Enum instead of copying code\n\n\nvar _def2 = (0, _classPrivateFieldLooseKey2.default)(\"def\");\n\nvar _index = (0, _classPrivateFieldLooseKey2.default)(\"index\");\n\nvar _indexes = (0, _classPrivateFieldLooseKey2.default)(\"indexes\");\n\nvar _isBasic = (0, _classPrivateFieldLooseKey2.default)(\"isBasic\");\n\nvar _raw = (0, _classPrivateFieldLooseKey2.default)(\"raw\");\n\nvar Enum = /*#__PURE__*/function () {\n  function Enum(registry, def, value, index) {\n    _classCallCheck(this, Enum);\n\n    this.registry = void 0;\n    Object.defineProperty(this, _def2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _index, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _indexes, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isBasic, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _raw, {\n      writable: true,\n      value: void 0\n    });\n    var defInfo = extractDef(registry, def);\n    var decoded = decodeEnum(registry, defInfo.def, value, index);\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2] = defInfo.def;\n    (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] = defInfo.isBasic;\n    (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes] = Object.keys(defInfo.def).map(function (_, index) {\n      return index;\n    });\n    (0, _classPrivateFieldLooseBase2.default)(this, _index)[_index] = (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes].indexOf(decoded.index) || 0;\n    (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] = decoded.value;\n  }\n\n  _createClass(Enum, [{\n    key: \"eq\",\n\n    /**\n     * @description Compares the value of the input to see if there is a match\n     */\n    value: function eq(other) {\n      // cater for the case where we only pass the enum index\n      if ((0, _util.isNumber)(other)) {\n        return this.toNumber() === other;\n      } else if ((0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] && (0, _util.isString)(other)) {\n        return this.type === other;\n      } else if ((0, _util.isU8a)(other)) {\n        return !this.toU8a().some(function (entry, index) {\n          return entry !== other[index];\n        });\n      } else if ((0, _util.isHex)(other)) {\n        return this.toHex() === other;\n      } else if (other instanceof Enum) {\n        return this.index === other.index && this.value.eq(other.value);\n      } else if ((0, _util.isObject)(other)) {\n        return this.value.eq(other[this.type]);\n      } // compare the actual wrapper value\n\n\n      return this.value.eq(other);\n    }\n    /**\n     * @description Returns a hex string representation of the value\n     */\n\n  }, {\n    key: \"toHex\",\n    value: function toHex() {\n      return (0, _util.u8aToHex)(this.toU8a());\n    }\n    /**\n     * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n     */\n\n  }, {\n    key: \"toHuman\",\n    value: function toHuman(isExtended) {\n      return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] ? this.type : _defineProperty({}, this.type, (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHuman(isExtended));\n    }\n    /**\n     * @description Converts the Object to JSON, typically used for RPC transfers\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] ? this.type : _defineProperty({}, this.type, (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toJSON());\n    }\n    /**\n     * @description Returns the number representation for the value\n     */\n\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return (0, _classPrivateFieldLooseBase2.default)(this, _index)[_index];\n    }\n    /**\n     * @description Returns a raw struct representation of the enum types\n     */\n\n  }, {\n    key: \"_toRawStruct\",\n    value: function _toRawStruct() {\n      return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] ? this.defKeys : _Struct.default.typesToMap(this.registry, (0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]);\n    }\n    /**\n     * @description Returns the base runtime type name for this instance\n     */\n\n  }, {\n    key: \"toRawType\",\n    value: function toRawType() {\n      return JSON.stringify({\n        _enum: this._toRawStruct()\n      });\n    }\n    /**\n     * @description Returns the string representation of the value\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.isNull ? this.type : JSON.stringify(this.toJSON());\n    }\n    /**\n     * @description Encodes the value as a Uint8Array as per the SCALE specifications\n     * @param isBare true when the value has none of the type-specific prefixes (internal)\n     */\n\n  }, {\n    key: \"toU8a\",\n    value: function toU8a(isBare) {\n      return (0, _util.u8aConcat)(new Uint8Array(isBare ? [] : [(0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes][(0, _classPrivateFieldLooseBase2.default)(this, _index)[_index]]]), (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toU8a(isBare));\n    }\n  }, {\n    key: \"encodedLength\",\n\n    /**\n     * @description The length of the value when encoded as a Uint8Array\n     */\n    get: function get() {\n      return 1 + (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].encodedLength;\n    }\n    /**\n     * @description returns a hash of the contents\n     */\n\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.registry.hash(this.toU8a());\n    }\n    /**\n     * @description The index of the metadata value\n     */\n\n  }, {\n    key: \"index\",\n    get: function get() {\n      return (0, _classPrivateFieldLooseBase2.default)(this, _index)[_index];\n    }\n    /**\n     * @description true if this is a basic enum (no values)\n     */\n\n  }, {\n    key: \"isBasic\",\n    get: function get() {\n      return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic];\n    }\n    /**\n     * @description Checks if the value is an empty value\n     */\n\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].isEmpty;\n    }\n    /**\n     * @description Checks if the Enum points to a [[Null]] type\n     */\n\n  }, {\n    key: \"isNone\",\n    get: function get() {\n      return this.isNull;\n    }\n    /**\n     * @description Checks if the Enum points to a [[Null]] type (deprecated, use isNone)\n     */\n\n  }, {\n    key: \"isNull\",\n    get: function get() {\n      return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] instanceof _Null.default;\n    }\n    /**\n     * @description The available keys for this enum\n     */\n\n  }, {\n    key: \"defEntries\",\n    get: function get() {\n      return Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]);\n    }\n    /**\n     * @description The available keys for this enum\n     */\n\n  }, {\n    key: \"defKeys\",\n    get: function get() {\n      return Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]);\n    }\n    /**\n     * @description The name of the type this enum value represents\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.defKeys[(0, _classPrivateFieldLooseBase2.default)(this, _index)[_index]];\n    }\n    /**\n     * @description The value of the enum\n     */\n\n  }, {\n    key: \"value\",\n    get: function get() {\n      return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw];\n    }\n  }], [{\n    key: \"with\",\n    value: function _with(Types) {\n      return /*#__PURE__*/function (_Enum) {\n        _inherits(_class, _Enum);\n\n        var _super = _createSuper(_class);\n\n        function _class(registry, value, index) {\n          var _this;\n\n          _classCallCheck(this, _class);\n\n          _this = _super.call(this, registry, Types, value, index);\n          Object.keys((0, _classPrivateFieldLooseBase2.default)(_assertThisInitialized(_this), _def2)[_def2]).forEach(function (_key) {\n            var name = (0, _util.stringUpperFirst)((0, _util.stringCamelCase)(_key.replace(' ', '_')));\n            var askey = \"as\".concat(name);\n            var iskey = \"is\".concat(name);\n            (0, _util.isUndefined)(_this[iskey]) && Object.defineProperty(_assertThisInitialized(_this), iskey, {\n              enumerable: true,\n              get: function get() {\n                return _this.type === _key;\n              }\n            });\n            (0, _util.isUndefined)(_this[askey]) && Object.defineProperty(_assertThisInitialized(_this), askey, {\n              enumerable: true,\n              get: function get() {\n                (0, _util.assert)(_this[iskey], \"Cannot convert '\".concat(_this.type, \"' via \").concat(askey));\n                return _this.value;\n              }\n            });\n          });\n          return _this;\n        }\n\n        return _class;\n      }(Enum);\n    }\n  }]);\n\n  return Enum;\n}();\n\nexports.default = Enum;","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/types/codec/Enum.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_util","_Null","_utils","_Struct","extractDef","registry","_def","Array","isArray","def","mapToTypeMap","isBasic","values","some","type","reduce","key","createFromValue","index","Clazz","assert","isUndefined","keys","join","decodeFromJSON","map","k","toLowerCase","keyLower","indexOf","error","Error","message","decodeFromString","isHex","decodeFromValue","hexToU8a","isU8a","subarray","isNumber","isString","toString","isObject","decodeEnum","Enum","_def2","_index","_indexes","_isBasic","_raw","writable","defInfo","decoded","_","other","toNumber","toU8a","entry","toHex","eq","u8aToHex","isExtended","toHuman","toJSON","defKeys","typesToMap","JSON","stringify","_enum","_toRawStruct","isNull","isBare","u8aConcat","Uint8Array","encodedLength","hash","isEmpty","Types","forEach","_key","name","stringUpperFirst","stringCamelCase","replace","askey","iskey","enumerable","get"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Null = _interopRequireDefault(require(\"../primitive/Null\"));\n\nvar _utils = require(\"./utils\");\n\nvar _Struct = _interopRequireDefault(require(\"./Struct\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nfunction extractDef(registry, _def) {\n  if (!Array.isArray(_def)) {\n    const def = (0, _utils.mapToTypeMap)(registry, _def);\n    const isBasic = !Object.values(def).some(type => type !== _Null.default);\n    return {\n      def,\n      isBasic\n    };\n  }\n\n  return {\n    def: _def.reduce((def, key) => {\n      def[key] = _Null.default;\n      return def;\n    }, {}),\n    isBasic: true\n  };\n}\n\nfunction createFromValue(registry, def, index = 0, value) {\n  const Clazz = Object.values(def)[index];\n  (0, _util.assert)(!(0, _util.isUndefined)(Clazz), `Unable to create Enum via index ${index}, in ${Object.keys(def).join(', ')}`);\n  return {\n    index,\n    value: value instanceof Clazz ? value : new Clazz(registry, value)\n  };\n}\n\nfunction decodeFromJSON(registry, def, key, value) {\n  // JSON comes in the form of { \"<type (lowercased)>\": \"<value for type>\" }, here we\n  // additionally force to lower to ensure forward compat\n  const keys = Object.keys(def).map(k => k.toLowerCase());\n  const keyLower = key.toLowerCase();\n  const index = keys.indexOf(keyLower);\n  (0, _util.assert)(index !== -1, `Cannot map Enum JSON, unable to find '${key}' in ${keys.join(', ')}`);\n\n  try {\n    return createFromValue(registry, def, index, value);\n  } catch (error) {\n    throw new Error(`Enum(${key}):: ${error.message}`);\n  }\n}\n\nfunction decodeFromString(registry, def, value) {\n  return (0, _util.isHex)(value) // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  ? decodeFromValue(registry, def, (0, _util.hexToU8a)(value)) : decodeFromJSON(registry, def, value);\n}\n\nfunction decodeFromValue(registry, def, value) {\n  if ((0, _util.isU8a)(value)) {\n    return createFromValue(registry, def, value[0], value.subarray(1));\n  } else if ((0, _util.isNumber)(value)) {\n    return createFromValue(registry, def, value);\n  } else if ((0, _util.isString)(value)) {\n    return decodeFromString(registry, def, value.toString());\n  } else if ((0, _util.isObject)(value)) {\n    const key = Object.keys(value)[0];\n    return decodeFromJSON(registry, def, key, value[key]);\n  } // Worst-case scenario, return the first with default\n\n\n  return createFromValue(registry, def, 0);\n}\n\nfunction decodeEnum(registry, def, value, index) {\n  // NOTE We check the index path first, before looking at values - this allows treating\n  // the optional indexes before anything else, more-specific > less-specific\n  if ((0, _util.isNumber)(index)) {\n    return createFromValue(registry, def, index, value); // eslint-disable-next-line @typescript-eslint/no-use-before-define\n  } else if (value instanceof Enum) {\n    return createFromValue(registry, def, value.index, value.value);\n  } // Or else, we just look at `value`\n\n\n  return decodeFromValue(registry, def, value);\n}\n/**\n * @name Enum\n * @description\n * This implements an enum, that based on the value wraps a different type. It is effectively\n * an extension to enum where the value type is determined by the actual index.\n */\n// TODO:\n//   - As per Enum, actually use TS enum\n//   - It should rather probably extend Enum instead of copying code\n\n\nvar _def2 = (0, _classPrivateFieldLooseKey2.default)(\"def\");\n\nvar _index = (0, _classPrivateFieldLooseKey2.default)(\"index\");\n\nvar _indexes = (0, _classPrivateFieldLooseKey2.default)(\"indexes\");\n\nvar _isBasic = (0, _classPrivateFieldLooseKey2.default)(\"isBasic\");\n\nvar _raw = (0, _classPrivateFieldLooseKey2.default)(\"raw\");\n\nclass Enum {\n  constructor(registry, def, value, index) {\n    this.registry = void 0;\n    Object.defineProperty(this, _def2, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _index, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _indexes, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isBasic, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _raw, {\n      writable: true,\n      value: void 0\n    });\n    const defInfo = extractDef(registry, def);\n    const decoded = decodeEnum(registry, defInfo.def, value, index);\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2] = defInfo.def;\n    (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] = defInfo.isBasic;\n    (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes] = Object.keys(defInfo.def).map((_, index) => index);\n    (0, _classPrivateFieldLooseBase2.default)(this, _index)[_index] = (0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes].indexOf(decoded.index) || 0;\n    (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] = decoded.value;\n  }\n\n  static with(Types) {\n    return class extends Enum {\n      constructor(registry, value, index) {\n        super(registry, Types, value, index);\n        Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]).forEach(_key => {\n          const name = (0, _util.stringUpperFirst)((0, _util.stringCamelCase)(_key.replace(' ', '_')));\n          const askey = `as${name}`;\n          const iskey = `is${name}`;\n          (0, _util.isUndefined)(this[iskey]) && Object.defineProperty(this, iskey, {\n            enumerable: true,\n            get: () => this.type === _key\n          });\n          (0, _util.isUndefined)(this[askey]) && Object.defineProperty(this, askey, {\n            enumerable: true,\n            get: () => {\n              (0, _util.assert)(this[iskey], `Cannot convert '${this.type}' via ${askey}`);\n              return this.value;\n            }\n          });\n        });\n      }\n\n    };\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return 1 + (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].encodedLength;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description The index of the metadata value\n   */\n\n\n  get index() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _index)[_index];\n  }\n  /**\n   * @description true if this is a basic enum (no values)\n   */\n\n\n  get isBasic() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic];\n  }\n  /**\n   * @description Checks if the value is an empty value\n   */\n\n\n  get isEmpty() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].isEmpty;\n  }\n  /**\n   * @description Checks if the Enum points to a [[Null]] type\n   */\n\n\n  get isNone() {\n    return this.isNull;\n  }\n  /**\n   * @description Checks if the Enum points to a [[Null]] type (deprecated, use isNone)\n   */\n\n\n  get isNull() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw] instanceof _Null.default;\n  }\n  /**\n   * @description The available keys for this enum\n   */\n\n\n  get defEntries() {\n    return Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]);\n  }\n  /**\n   * @description The available keys for this enum\n   */\n\n\n  get defKeys() {\n    return Object.keys((0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]);\n  }\n  /**\n   * @description The name of the type this enum value represents\n   */\n\n\n  get type() {\n    return this.defKeys[(0, _classPrivateFieldLooseBase2.default)(this, _index)[_index]];\n  }\n  /**\n   * @description The value of the enum\n   */\n\n\n  get value() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw];\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n\n\n  eq(other) {\n    // cater for the case where we only pass the enum index\n    if ((0, _util.isNumber)(other)) {\n      return this.toNumber() === other;\n    } else if ((0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] && (0, _util.isString)(other)) {\n      return this.type === other;\n    } else if ((0, _util.isU8a)(other)) {\n      return !this.toU8a().some((entry, index) => entry !== other[index]);\n    } else if ((0, _util.isHex)(other)) {\n      return this.toHex() === other;\n    } else if (other instanceof Enum) {\n      return this.index === other.index && this.value.eq(other.value);\n    } else if ((0, _util.isObject)(other)) {\n      return this.value.eq(other[this.type]);\n    } // compare the actual wrapper value\n\n\n    return this.value.eq(other);\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex() {\n    return (0, _util.u8aToHex)(this.toU8a());\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n\n\n  toHuman(isExtended) {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] ? this.type : {\n      [this.type]: (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toHuman(isExtended)\n    };\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] ? this.type : {\n      [this.type]: (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toJSON()\n    };\n  }\n  /**\n   * @description Returns the number representation for the value\n   */\n\n\n  toNumber() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _index)[_index];\n  }\n  /**\n   * @description Returns a raw struct representation of the enum types\n   */\n\n\n  _toRawStruct() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _isBasic)[_isBasic] ? this.defKeys : _Struct.default.typesToMap(this.registry, (0, _classPrivateFieldLooseBase2.default)(this, _def2)[_def2]);\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    return JSON.stringify({\n      _enum: this._toRawStruct()\n    });\n  }\n  /**\n   * @description Returns the string representation of the value\n   */\n\n\n  toString() {\n    return this.isNull ? this.type : JSON.stringify(this.toJSON());\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n\n\n  toU8a(isBare) {\n    return (0, _util.u8aConcat)(new Uint8Array(isBare ? [] : [(0, _classPrivateFieldLooseBase2.default)(this, _indexes)[_indexes][(0, _classPrivateFieldLooseBase2.default)(this, _index)[_index]]]), (0, _classPrivateFieldLooseBase2.default)(this, _raw)[_raw].toU8a(isBare));\n  }\n\n}\n\nexports.default = Enum;"]},"metadata":{},"sourceType":"script"}