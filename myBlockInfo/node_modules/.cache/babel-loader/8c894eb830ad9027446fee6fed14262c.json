{"ast":null,"code":"// Copyright 2019-2020 @polkadot/wasm-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst asmFallback = require('./wasm/asm-empty');\n\nconst wasmBytes = require('./wasm/bytes');\n\nconst {\n  allocString,\n  allocU8a,\n  getWasm,\n  initWasm,\n  resultString,\n  resultU8a,\n  withWasm\n} = require('./bridge');\n\nconst imports = require('./imports');\n\nconst wasmPromise = initWasm(wasmBytes, asmFallback, imports).catch(() => null);\nmodule.exports.bip39Generate = withWasm((wasm, words) => {\n  wasm.ext_bip39_generate(8, words);\n  return resultString();\n});\nmodule.exports.bip39ToEntropy = withWasm((wasm, phrase) => {\n  const [ptr0, len0] = allocString(phrase);\n  wasm.ext_bip39_to_entropy(8, ptr0, len0);\n  return resultU8a();\n});\nmodule.exports.bip39ToMiniSecret = withWasm((wasm, phrase, password) => {\n  const [ptr0, len0] = allocString(phrase);\n  const [ptr1, len1] = allocString(password);\n  wasm.ext_bip39_to_mini_secret(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nmodule.exports.bip39ToSeed = withWasm((wasm, phrase, password) => {\n  const [ptr0, len0] = allocString(phrase);\n  const [ptr1, len1] = allocString(password);\n  wasm.ext_bip39_to_seed(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nmodule.exports.bip39Validate = withWasm((wasm, phrase) => {\n  const [ptr0, len0] = allocString(phrase);\n  const ret = wasm.ext_bip39_validate(ptr0, len0);\n  return ret !== 0;\n});\nmodule.exports.ed25519KeypairFromSeed = withWasm((wasm, seed) => {\n  const [ptr0, len0] = allocU8a(seed);\n  wasm.ext_ed_from_seed(8, ptr0, len0);\n  return resultU8a();\n});\nmodule.exports.ed25519Sign = withWasm((wasm, pubkey, seckey, message) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(seckey);\n  const [ptr2, len2] = allocU8a(message);\n  wasm.ext_ed_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n  return resultU8a();\n});\nmodule.exports.ed25519Verify = withWasm((wasm, signature, message, pubkey) => {\n  const [ptr0, len0] = allocU8a(signature);\n  const [ptr1, len1] = allocU8a(message);\n  const [ptr2, len2] = allocU8a(pubkey);\n  const ret = wasm.ext_ed_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n  return ret !== 0;\n});\nmodule.exports.blake2b = withWasm((wasm, data, key, size) => {\n  const [ptr0, len0] = allocU8a(data);\n  const [ptr1, len1] = allocU8a(key);\n  wasm.ext_blake2b(8, ptr0, len0, ptr1, len1, size);\n  return resultU8a();\n});\nmodule.exports.keccak256 = withWasm((wasm, data) => {\n  const [ptr0, len0] = allocU8a(data);\n  wasm.ext_keccak256(8, ptr0, len0);\n  return resultU8a();\n});\nmodule.exports.pbkdf2 = withWasm((wasm, data, salt, rounds) => {\n  const [ptr0, len0] = allocU8a(data);\n  const [ptr1, len1] = allocU8a(salt);\n  wasm.ext_pbkdf2(8, ptr0, len0, ptr1, len1, rounds);\n  return resultU8a();\n});\nmodule.exports.scrypt = withWasm((wasm, password, salt, log2n, r, p) => {\n  const [ptr0, len0] = allocU8a(password);\n  const [ptr1, len1] = allocU8a(salt);\n  wasm.ext_scrypt(8, ptr0, len0, ptr1, len1, log2n, r, p);\n  return resultU8a();\n});\nmodule.exports.sha512 = withWasm((wasm, data) => {\n  const [ptr0, len0] = allocU8a(data);\n  wasm.ext_sha512(8, ptr0, len0);\n  return resultU8a();\n});\nmodule.exports.twox = withWasm((wasm, data, rounds) => {\n  const [ptr0, len0] = allocU8a(data);\n  wasm.ext_twox(8, ptr0, len0, rounds);\n  return resultU8a();\n});\nmodule.exports.sr25519DeriveKeypairHard = withWasm((wasm, pair, cc) => {\n  const [ptr0, len0] = allocU8a(pair);\n  const [ptr1, len1] = allocU8a(cc);\n  wasm.ext_sr_derive_keypair_hard(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nmodule.exports.sr25519DeriveKeypairSoft = withWasm((wasm, pair, cc) => {\n  const [ptr0, len0] = allocU8a(pair);\n  const [ptr1, len1] = allocU8a(cc);\n  wasm.ext_sr_derive_keypair_soft(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nmodule.exports.sr25519DerivePublicSoft = withWasm((wasm, pubkey, cc) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(cc);\n  wasm.ext_sr_derive_public_soft(8, ptr0, len0, ptr1, len1);\n  return resultU8a();\n});\nmodule.exports.sr25519KeypairFromSeed = withWasm((wasm, seed) => {\n  const [ptr0, len0] = allocU8a(seed);\n  wasm.ext_sr_from_seed(8, ptr0, len0);\n  return resultU8a();\n});\nmodule.exports.sr25519Sign = withWasm((wasm, pubkey, secret, message) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(secret);\n  const [ptr2, len2] = allocU8a(message);\n  wasm.ext_sr_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n  return resultU8a();\n});\nmodule.exports.sr25519Verify = withWasm((wasm, signature, message, pubkey) => {\n  const [ptr0, len0] = allocU8a(signature);\n  const [ptr1, len1] = allocU8a(message);\n  const [ptr2, len2] = allocU8a(pubkey);\n  const ret = wasm.ext_sr_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n  return ret !== 0;\n});\n\nmodule.exports.isReady = function () {\n  return !!getWasm();\n};\n\nmodule.exports.waitReady = function () {\n  return wasmPromise.then(() => !!getWasm());\n};","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/metadata/node_modules/@polkadot/wasm-crypto/index.js"],"names":["asmFallback","require","wasmBytes","allocString","allocU8a","getWasm","initWasm","resultString","resultU8a","withWasm","imports","wasmPromise","catch","module","exports","bip39Generate","wasm","words","ext_bip39_generate","bip39ToEntropy","phrase","ptr0","len0","ext_bip39_to_entropy","bip39ToMiniSecret","password","ptr1","len1","ext_bip39_to_mini_secret","bip39ToSeed","ext_bip39_to_seed","bip39Validate","ret","ext_bip39_validate","ed25519KeypairFromSeed","seed","ext_ed_from_seed","ed25519Sign","pubkey","seckey","message","ptr2","len2","ext_ed_sign","ed25519Verify","signature","ext_ed_verify","blake2b","data","key","size","ext_blake2b","keccak256","ext_keccak256","pbkdf2","salt","rounds","ext_pbkdf2","scrypt","log2n","r","p","ext_scrypt","sha512","ext_sha512","twox","ext_twox","sr25519DeriveKeypairHard","pair","cc","ext_sr_derive_keypair_hard","sr25519DeriveKeypairSoft","ext_sr_derive_keypair_soft","sr25519DerivePublicSoft","ext_sr_derive_public_soft","sr25519KeypairFromSeed","ext_sr_from_seed","sr25519Sign","secret","ext_sr_sign","sr25519Verify","ext_sr_verify","isReady","waitReady","then"],"mappings":"AAAA;AACA;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,kBAAD,CAA3B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAM;AAAEE,EAAAA,WAAF;AAAeC,EAAAA,QAAf;AAAyBC,EAAAA,OAAzB;AAAkCC,EAAAA,QAAlC;AAA4CC,EAAAA,YAA5C;AAA0DC,EAAAA,SAA1D;AAAqEC,EAAAA;AAArE,IAAkFR,OAAO,CAAC,UAAD,CAA/F;;AACA,MAAMS,OAAO,GAAGT,OAAO,CAAC,WAAD,CAAvB;;AAEA,MAAMU,WAAW,GAAGL,QAAQ,CAACJ,SAAD,EAAYF,WAAZ,EAAyBU,OAAzB,CAAR,CAA0CE,KAA1C,CAAgD,MAAM,IAAtD,CAApB;AAEAC,MAAM,CAACC,OAAP,CAAeC,aAAf,GAA+BN,QAAQ,CAAC,CAACO,IAAD,EAAOC,KAAP,KAAiB;AACvDD,EAAAA,IAAI,CAACE,kBAAL,CAAwB,CAAxB,EAA2BD,KAA3B;AAEA,SAAOV,YAAY,EAAnB;AACD,CAJsC,CAAvC;AAMAM,MAAM,CAACC,OAAP,CAAeK,cAAf,GAAgCV,QAAQ,CAAC,CAACO,IAAD,EAAOI,MAAP,KAAkB;AACzD,QAAM,CAACC,IAAD,EAAOC,IAAP,IAAenB,WAAW,CAACiB,MAAD,CAAhC;AAEAJ,EAAAA,IAAI,CAACO,oBAAL,CAA0B,CAA1B,EAA6BF,IAA7B,EAAmCC,IAAnC;AAEA,SAAOd,SAAS,EAAhB;AACD,CANuC,CAAxC;AAQAK,MAAM,CAACC,OAAP,CAAeU,iBAAf,GAAmCf,QAAQ,CAAC,CAACO,IAAD,EAAOI,MAAP,EAAeK,QAAf,KAA4B;AACtE,QAAM,CAACJ,IAAD,EAAOC,IAAP,IAAenB,WAAW,CAACiB,MAAD,CAAhC;AACA,QAAM,CAACM,IAAD,EAAOC,IAAP,IAAexB,WAAW,CAACsB,QAAD,CAAhC;AAEAT,EAAAA,IAAI,CAACY,wBAAL,CAA8B,CAA9B,EAAiCP,IAAjC,EAAuCC,IAAvC,EAA6CI,IAA7C,EAAmDC,IAAnD;AAEA,SAAOnB,SAAS,EAAhB;AACD,CAP0C,CAA3C;AASAK,MAAM,CAACC,OAAP,CAAee,WAAf,GAA6BpB,QAAQ,CAAC,CAACO,IAAD,EAAOI,MAAP,EAAeK,QAAf,KAA4B;AAChE,QAAM,CAACJ,IAAD,EAAOC,IAAP,IAAenB,WAAW,CAACiB,MAAD,CAAhC;AACA,QAAM,CAACM,IAAD,EAAOC,IAAP,IAAexB,WAAW,CAACsB,QAAD,CAAhC;AAEAT,EAAAA,IAAI,CAACc,iBAAL,CAAuB,CAAvB,EAA0BT,IAA1B,EAAgCC,IAAhC,EAAsCI,IAAtC,EAA4CC,IAA5C;AAEA,SAAOnB,SAAS,EAAhB;AACD,CAPoC,CAArC;AASAK,MAAM,CAACC,OAAP,CAAeiB,aAAf,GAA+BtB,QAAQ,CAAC,CAACO,IAAD,EAAOI,MAAP,KAAkB;AACxD,QAAM,CAACC,IAAD,EAAOC,IAAP,IAAenB,WAAW,CAACiB,MAAD,CAAhC;AACA,QAAMY,GAAG,GAAGhB,IAAI,CAACiB,kBAAL,CAAwBZ,IAAxB,EAA8BC,IAA9B,CAAZ;AAEA,SAAOU,GAAG,KAAK,CAAf;AACD,CALsC,CAAvC;AAOAnB,MAAM,CAACC,OAAP,CAAeoB,sBAAf,GAAwCzB,QAAQ,CAAC,CAACO,IAAD,EAAOmB,IAAP,KAAgB;AAC/D,QAAM,CAACd,IAAD,EAAOC,IAAP,IAAelB,QAAQ,CAAC+B,IAAD,CAA7B;AAEAnB,EAAAA,IAAI,CAACoB,gBAAL,CAAsB,CAAtB,EAAyBf,IAAzB,EAA+BC,IAA/B;AAEA,SAAOd,SAAS,EAAhB;AACD,CAN+C,CAAhD;AAQAK,MAAM,CAACC,OAAP,CAAeuB,WAAf,GAA6B5B,QAAQ,CAAC,CAACO,IAAD,EAAOsB,MAAP,EAAeC,MAAf,EAAuBC,OAAvB,KAAmC;AACvE,QAAM,CAACnB,IAAD,EAAOC,IAAP,IAAelB,QAAQ,CAACkC,MAAD,CAA7B;AACA,QAAM,CAACZ,IAAD,EAAOC,IAAP,IAAevB,QAAQ,CAACmC,MAAD,CAA7B;AACA,QAAM,CAACE,IAAD,EAAOC,IAAP,IAAetC,QAAQ,CAACoC,OAAD,CAA7B;AAEAxB,EAAAA,IAAI,CAAC2B,WAAL,CAAiB,CAAjB,EAAoBtB,IAApB,EAA0BC,IAA1B,EAAgCI,IAAhC,EAAsCC,IAAtC,EAA4Cc,IAA5C,EAAkDC,IAAlD;AAEA,SAAOlC,SAAS,EAAhB;AACD,CARoC,CAArC;AAUAK,MAAM,CAACC,OAAP,CAAe8B,aAAf,GAA+BnC,QAAQ,CAAC,CAACO,IAAD,EAAO6B,SAAP,EAAkBL,OAAlB,EAA2BF,MAA3B,KAAsC;AAC5E,QAAM,CAACjB,IAAD,EAAOC,IAAP,IAAelB,QAAQ,CAACyC,SAAD,CAA7B;AACA,QAAM,CAACnB,IAAD,EAAOC,IAAP,IAAevB,QAAQ,CAACoC,OAAD,CAA7B;AACA,QAAM,CAACC,IAAD,EAAOC,IAAP,IAAetC,QAAQ,CAACkC,MAAD,CAA7B;AACA,QAAMN,GAAG,GAAGhB,IAAI,CAAC8B,aAAL,CAAmBzB,IAAnB,EAAyBC,IAAzB,EAA+BI,IAA/B,EAAqCC,IAArC,EAA2Cc,IAA3C,EAAiDC,IAAjD,CAAZ;AAEA,SAAOV,GAAG,KAAK,CAAf;AACD,CAPsC,CAAvC;AASAnB,MAAM,CAACC,OAAP,CAAeiC,OAAf,GAAyBtC,QAAQ,CAAC,CAACO,IAAD,EAAOgC,IAAP,EAAaC,GAAb,EAAkBC,IAAlB,KAA2B;AAC3D,QAAM,CAAC7B,IAAD,EAAOC,IAAP,IAAelB,QAAQ,CAAC4C,IAAD,CAA7B;AACA,QAAM,CAACtB,IAAD,EAAOC,IAAP,IAAevB,QAAQ,CAAC6C,GAAD,CAA7B;AAEAjC,EAAAA,IAAI,CAACmC,WAAL,CAAiB,CAAjB,EAAoB9B,IAApB,EAA0BC,IAA1B,EAAgCI,IAAhC,EAAsCC,IAAtC,EAA4CuB,IAA5C;AAEA,SAAO1C,SAAS,EAAhB;AACD,CAPgC,CAAjC;AASAK,MAAM,CAACC,OAAP,CAAesC,SAAf,GAA2B3C,QAAQ,CAAC,CAACO,IAAD,EAAOgC,IAAP,KAAgB;AAClD,QAAM,CAAC3B,IAAD,EAAOC,IAAP,IAAelB,QAAQ,CAAC4C,IAAD,CAA7B;AAEAhC,EAAAA,IAAI,CAACqC,aAAL,CAAmB,CAAnB,EAAsBhC,IAAtB,EAA4BC,IAA5B;AAEA,SAAOd,SAAS,EAAhB;AACD,CANkC,CAAnC;AAQAK,MAAM,CAACC,OAAP,CAAewC,MAAf,GAAwB7C,QAAQ,CAAC,CAACO,IAAD,EAAOgC,IAAP,EAAaO,IAAb,EAAmBC,MAAnB,KAA8B;AAC7D,QAAM,CAACnC,IAAD,EAAOC,IAAP,IAAelB,QAAQ,CAAC4C,IAAD,CAA7B;AACA,QAAM,CAACtB,IAAD,EAAOC,IAAP,IAAevB,QAAQ,CAACmD,IAAD,CAA7B;AAEAvC,EAAAA,IAAI,CAACyC,UAAL,CAAgB,CAAhB,EAAmBpC,IAAnB,EAAyBC,IAAzB,EAA+BI,IAA/B,EAAqCC,IAArC,EAA2C6B,MAA3C;AAEA,SAAOhD,SAAS,EAAhB;AACD,CAP+B,CAAhC;AASAK,MAAM,CAACC,OAAP,CAAe4C,MAAf,GAAwBjD,QAAQ,CAAC,CAACO,IAAD,EAAOS,QAAP,EAAiB8B,IAAjB,EAAuBI,KAAvB,EAA8BC,CAA9B,EAAiCC,CAAjC,KAAuC;AACtE,QAAM,CAACxC,IAAD,EAAOC,IAAP,IAAelB,QAAQ,CAACqB,QAAD,CAA7B;AACA,QAAM,CAACC,IAAD,EAAOC,IAAP,IAAevB,QAAQ,CAACmD,IAAD,CAA7B;AAEAvC,EAAAA,IAAI,CAAC8C,UAAL,CAAgB,CAAhB,EAAmBzC,IAAnB,EAAyBC,IAAzB,EAA+BI,IAA/B,EAAqCC,IAArC,EAA2CgC,KAA3C,EAAkDC,CAAlD,EAAqDC,CAArD;AAEA,SAAOrD,SAAS,EAAhB;AACD,CAP+B,CAAhC;AASAK,MAAM,CAACC,OAAP,CAAeiD,MAAf,GAAwBtD,QAAQ,CAAC,CAACO,IAAD,EAAOgC,IAAP,KAAgB;AAC/C,QAAM,CAAC3B,IAAD,EAAOC,IAAP,IAAelB,QAAQ,CAAC4C,IAAD,CAA7B;AAEAhC,EAAAA,IAAI,CAACgD,UAAL,CAAgB,CAAhB,EAAmB3C,IAAnB,EAAyBC,IAAzB;AAEA,SAAOd,SAAS,EAAhB;AACD,CAN+B,CAAhC;AAQAK,MAAM,CAACC,OAAP,CAAemD,IAAf,GAAsBxD,QAAQ,CAAC,CAACO,IAAD,EAAOgC,IAAP,EAAaQ,MAAb,KAAwB;AACrD,QAAM,CAACnC,IAAD,EAAOC,IAAP,IAAelB,QAAQ,CAAC4C,IAAD,CAA7B;AAEAhC,EAAAA,IAAI,CAACkD,QAAL,CAAc,CAAd,EAAiB7C,IAAjB,EAAuBC,IAAvB,EAA6BkC,MAA7B;AAEA,SAAOhD,SAAS,EAAhB;AACD,CAN6B,CAA9B;AAQAK,MAAM,CAACC,OAAP,CAAeqD,wBAAf,GAA0C1D,QAAQ,CAAC,CAACO,IAAD,EAAOoD,IAAP,EAAaC,EAAb,KAAoB;AACrE,QAAM,CAAChD,IAAD,EAAOC,IAAP,IAAelB,QAAQ,CAACgE,IAAD,CAA7B;AACA,QAAM,CAAC1C,IAAD,EAAOC,IAAP,IAAevB,QAAQ,CAACiE,EAAD,CAA7B;AAEArD,EAAAA,IAAI,CAACsD,0BAAL,CAAgC,CAAhC,EAAmCjD,IAAnC,EAAyCC,IAAzC,EAA+CI,IAA/C,EAAqDC,IAArD;AAEA,SAAOnB,SAAS,EAAhB;AACD,CAPiD,CAAlD;AASAK,MAAM,CAACC,OAAP,CAAeyD,wBAAf,GAA0C9D,QAAQ,CAAC,CAACO,IAAD,EAAOoD,IAAP,EAAaC,EAAb,KAAoB;AACrE,QAAM,CAAChD,IAAD,EAAOC,IAAP,IAAelB,QAAQ,CAACgE,IAAD,CAA7B;AACA,QAAM,CAAC1C,IAAD,EAAOC,IAAP,IAAevB,QAAQ,CAACiE,EAAD,CAA7B;AAEArD,EAAAA,IAAI,CAACwD,0BAAL,CAAgC,CAAhC,EAAmCnD,IAAnC,EAAyCC,IAAzC,EAA+CI,IAA/C,EAAqDC,IAArD;AAEA,SAAOnB,SAAS,EAAhB;AACD,CAPiD,CAAlD;AASAK,MAAM,CAACC,OAAP,CAAe2D,uBAAf,GAAyChE,QAAQ,CAAC,CAACO,IAAD,EAAOsB,MAAP,EAAe+B,EAAf,KAAsB;AACtE,QAAM,CAAChD,IAAD,EAAOC,IAAP,IAAelB,QAAQ,CAACkC,MAAD,CAA7B;AACA,QAAM,CAACZ,IAAD,EAAOC,IAAP,IAAevB,QAAQ,CAACiE,EAAD,CAA7B;AAEArD,EAAAA,IAAI,CAAC0D,yBAAL,CAA+B,CAA/B,EAAkCrD,IAAlC,EAAwCC,IAAxC,EAA8CI,IAA9C,EAAoDC,IAApD;AAEA,SAAOnB,SAAS,EAAhB;AACD,CAPgD,CAAjD;AASAK,MAAM,CAACC,OAAP,CAAe6D,sBAAf,GAAwClE,QAAQ,CAAC,CAACO,IAAD,EAAOmB,IAAP,KAAgB;AAC/D,QAAM,CAACd,IAAD,EAAOC,IAAP,IAAelB,QAAQ,CAAC+B,IAAD,CAA7B;AAEAnB,EAAAA,IAAI,CAAC4D,gBAAL,CAAsB,CAAtB,EAAyBvD,IAAzB,EAA+BC,IAA/B;AAEA,SAAOd,SAAS,EAAhB;AACD,CAN+C,CAAhD;AAQAK,MAAM,CAACC,OAAP,CAAe+D,WAAf,GAA6BpE,QAAQ,CAAC,CAACO,IAAD,EAAOsB,MAAP,EAAewC,MAAf,EAAuBtC,OAAvB,KAAmC;AACvE,QAAM,CAACnB,IAAD,EAAOC,IAAP,IAAelB,QAAQ,CAACkC,MAAD,CAA7B;AACA,QAAM,CAACZ,IAAD,EAAOC,IAAP,IAAevB,QAAQ,CAAC0E,MAAD,CAA7B;AACA,QAAM,CAACrC,IAAD,EAAOC,IAAP,IAAetC,QAAQ,CAACoC,OAAD,CAA7B;AAEAxB,EAAAA,IAAI,CAAC+D,WAAL,CAAiB,CAAjB,EAAoB1D,IAApB,EAA0BC,IAA1B,EAAgCI,IAAhC,EAAsCC,IAAtC,EAA4Cc,IAA5C,EAAkDC,IAAlD;AAEA,SAAOlC,SAAS,EAAhB;AACD,CARoC,CAArC;AAUAK,MAAM,CAACC,OAAP,CAAekE,aAAf,GAA+BvE,QAAQ,CAAC,CAACO,IAAD,EAAO6B,SAAP,EAAkBL,OAAlB,EAA2BF,MAA3B,KAAsC;AAC5E,QAAM,CAACjB,IAAD,EAAOC,IAAP,IAAelB,QAAQ,CAACyC,SAAD,CAA7B;AACA,QAAM,CAACnB,IAAD,EAAOC,IAAP,IAAevB,QAAQ,CAACoC,OAAD,CAA7B;AACA,QAAM,CAACC,IAAD,EAAOC,IAAP,IAAetC,QAAQ,CAACkC,MAAD,CAA7B;AACA,QAAMN,GAAG,GAAGhB,IAAI,CAACiE,aAAL,CAAmB5D,IAAnB,EAAyBC,IAAzB,EAA+BI,IAA/B,EAAqCC,IAArC,EAA2Cc,IAA3C,EAAiDC,IAAjD,CAAZ;AAEA,SAAOV,GAAG,KAAK,CAAf;AACD,CAPsC,CAAvC;;AASAnB,MAAM,CAACC,OAAP,CAAeoE,OAAf,GAAyB,YAAY;AACnC,SAAO,CAAC,CAAC7E,OAAO,EAAhB;AACD,CAFD;;AAIAQ,MAAM,CAACC,OAAP,CAAeqE,SAAf,GAA2B,YAAY;AACrC,SAAOxE,WAAW,CAACyE,IAAZ,CAAiB,MAAM,CAAC,CAAC/E,OAAO,EAAhC,CAAP;AACD,CAFD","sourcesContent":["// Copyright 2019-2020 @polkadot/wasm-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nconst asmFallback = require('./wasm/asm-empty');\nconst wasmBytes = require('./wasm/bytes');\nconst { allocString, allocU8a, getWasm, initWasm, resultString, resultU8a, withWasm } = require('./bridge');\nconst imports = require('./imports');\n\nconst wasmPromise = initWasm(wasmBytes, asmFallback, imports).catch(() => null);\n\nmodule.exports.bip39Generate = withWasm((wasm, words) => {\n  wasm.ext_bip39_generate(8, words);\n\n  return resultString();\n});\n\nmodule.exports.bip39ToEntropy = withWasm((wasm, phrase) => {\n  const [ptr0, len0] = allocString(phrase);\n\n  wasm.ext_bip39_to_entropy(8, ptr0, len0);\n\n  return resultU8a();\n});\n\nmodule.exports.bip39ToMiniSecret = withWasm((wasm, phrase, password) => {\n  const [ptr0, len0] = allocString(phrase);\n  const [ptr1, len1] = allocString(password);\n\n  wasm.ext_bip39_to_mini_secret(8, ptr0, len0, ptr1, len1);\n\n  return resultU8a();\n});\n\nmodule.exports.bip39ToSeed = withWasm((wasm, phrase, password) => {\n  const [ptr0, len0] = allocString(phrase);\n  const [ptr1, len1] = allocString(password);\n\n  wasm.ext_bip39_to_seed(8, ptr0, len0, ptr1, len1);\n\n  return resultU8a();\n});\n\nmodule.exports.bip39Validate = withWasm((wasm, phrase) => {\n  const [ptr0, len0] = allocString(phrase);\n  const ret = wasm.ext_bip39_validate(ptr0, len0);\n\n  return ret !== 0;\n});\n\nmodule.exports.ed25519KeypairFromSeed = withWasm((wasm, seed) => {\n  const [ptr0, len0] = allocU8a(seed);\n\n  wasm.ext_ed_from_seed(8, ptr0, len0);\n\n  return resultU8a();\n});\n\nmodule.exports.ed25519Sign = withWasm((wasm, pubkey, seckey, message) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(seckey);\n  const [ptr2, len2] = allocU8a(message);\n\n  wasm.ext_ed_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n\n  return resultU8a();\n});\n\nmodule.exports.ed25519Verify = withWasm((wasm, signature, message, pubkey) => {\n  const [ptr0, len0] = allocU8a(signature);\n  const [ptr1, len1] = allocU8a(message);\n  const [ptr2, len2] = allocU8a(pubkey);\n  const ret = wasm.ext_ed_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n\n  return ret !== 0;\n});\n\nmodule.exports.blake2b = withWasm((wasm, data, key, size) => {\n  const [ptr0, len0] = allocU8a(data);\n  const [ptr1, len1] = allocU8a(key);\n\n  wasm.ext_blake2b(8, ptr0, len0, ptr1, len1, size);\n\n  return resultU8a();\n});\n\nmodule.exports.keccak256 = withWasm((wasm, data) => {\n  const [ptr0, len0] = allocU8a(data);\n\n  wasm.ext_keccak256(8, ptr0, len0);\n\n  return resultU8a();\n});\n\nmodule.exports.pbkdf2 = withWasm((wasm, data, salt, rounds) => {\n  const [ptr0, len0] = allocU8a(data);\n  const [ptr1, len1] = allocU8a(salt);\n\n  wasm.ext_pbkdf2(8, ptr0, len0, ptr1, len1, rounds);\n\n  return resultU8a();\n});\n\nmodule.exports.scrypt = withWasm((wasm, password, salt, log2n, r, p) => {\n  const [ptr0, len0] = allocU8a(password);\n  const [ptr1, len1] = allocU8a(salt);\n\n  wasm.ext_scrypt(8, ptr0, len0, ptr1, len1, log2n, r, p);\n\n  return resultU8a();\n});\n\nmodule.exports.sha512 = withWasm((wasm, data) => {\n  const [ptr0, len0] = allocU8a(data);\n\n  wasm.ext_sha512(8, ptr0, len0);\n\n  return resultU8a();\n});\n\nmodule.exports.twox = withWasm((wasm, data, rounds) => {\n  const [ptr0, len0] = allocU8a(data);\n\n  wasm.ext_twox(8, ptr0, len0, rounds);\n\n  return resultU8a();\n});\n\nmodule.exports.sr25519DeriveKeypairHard = withWasm((wasm, pair, cc) => {\n  const [ptr0, len0] = allocU8a(pair);\n  const [ptr1, len1] = allocU8a(cc);\n\n  wasm.ext_sr_derive_keypair_hard(8, ptr0, len0, ptr1, len1);\n\n  return resultU8a();\n});\n\nmodule.exports.sr25519DeriveKeypairSoft = withWasm((wasm, pair, cc) => {\n  const [ptr0, len0] = allocU8a(pair);\n  const [ptr1, len1] = allocU8a(cc);\n\n  wasm.ext_sr_derive_keypair_soft(8, ptr0, len0, ptr1, len1);\n\n  return resultU8a();\n});\n\nmodule.exports.sr25519DerivePublicSoft = withWasm((wasm, pubkey, cc) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(cc);\n\n  wasm.ext_sr_derive_public_soft(8, ptr0, len0, ptr1, len1);\n\n  return resultU8a();\n});\n\nmodule.exports.sr25519KeypairFromSeed = withWasm((wasm, seed) => {\n  const [ptr0, len0] = allocU8a(seed);\n\n  wasm.ext_sr_from_seed(8, ptr0, len0);\n\n  return resultU8a();\n});\n\nmodule.exports.sr25519Sign = withWasm((wasm, pubkey, secret, message) => {\n  const [ptr0, len0] = allocU8a(pubkey);\n  const [ptr1, len1] = allocU8a(secret);\n  const [ptr2, len2] = allocU8a(message);\n\n  wasm.ext_sr_sign(8, ptr0, len0, ptr1, len1, ptr2, len2);\n\n  return resultU8a();\n});\n\nmodule.exports.sr25519Verify = withWasm((wasm, signature, message, pubkey) => {\n  const [ptr0, len0] = allocU8a(signature);\n  const [ptr1, len1] = allocU8a(message);\n  const [ptr2, len2] = allocU8a(pubkey);\n  const ret = wasm.ext_sr_verify(ptr0, len0, ptr1, len1, ptr2, len2);\n\n  return ret !== 0;\n});\n\nmodule.exports.isReady = function () {\n  return !!getWasm();\n};\n\nmodule.exports.waitReady = function () {\n  return wasmPromise.then(() => !!getWasm());\n};\n"]},"metadata":{},"sourceType":"script"}