{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = u8aToHex; // Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nvar ALPHABET = new Array(256).fill(0).map(function (_, n) {\n  return n.toString(16).padStart(2, '0');\n});\n/** @internal */\n\nfunction extract(value) {\n  var result = new Array(value.length);\n\n  for (var i = 0; i < value.length; i++) {\n    result[i] = ALPHABET[value[i]];\n  }\n\n  return result.join('');\n}\n/** @internal */\n\n\nfunction trim(value, halfLength) {\n  return \"\".concat(u8aToHex(value.subarray(0, halfLength), -1, false), \"\\u2026\").concat(u8aToHex(value.subarray(value.length - halfLength), -1, false));\n}\n/**\n * @name u8aToHex\n * @summary Creates a hex string from a Uint8Array object.\n * @description\n * `UInt8Array` input values return the actual hex string. `null` or `undefined` values returns an `0x` string.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToHex } from '@polkadot/util';\n *\n * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f\n * ```\n */\n\n\nfunction u8aToHex(value) {\n  var bitLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n  var isPrefixed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var prefix = isPrefixed ? '0x' : '';\n\n  if (!(value === null || value === void 0 ? void 0 : value.length)) {\n    return prefix;\n  }\n\n  var byteLength = Math.ceil(bitLength / 8);\n  return prefix + (byteLength > 0 && value.length > byteLength ? trim(value, Math.ceil(byteLength / 2)) : extract(value));\n}","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/rpc-provider/node_modules/@polkadot/util/u8a/toHex.js"],"names":["Object","defineProperty","exports","value","default","u8aToHex","ALPHABET","Array","fill","map","_","n","toString","padStart","extract","result","length","i","join","trim","halfLength","subarray","bitLength","isPrefixed","prefix","byteLength","Math","ceil"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,QAAlB,C,CACA;AACA;;AACA,IAAMC,QAAQ,GAAG,IAAIC,KAAJ,CAAU,GAAV,EAAeC,IAAf,CAAoB,CAApB,EAAuBC,GAAvB,CAA2B,UAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUA,CAAC,CAACC,QAAF,CAAW,EAAX,EAAeC,QAAf,CAAwB,CAAxB,EAA2B,GAA3B,CAAV;AAAA,CAA3B,CAAjB;AACA;;AAEA,SAASC,OAAT,CAAiBX,KAAjB,EAAwB;AACtB,MAAMY,MAAM,GAAG,IAAIR,KAAJ,CAAUJ,KAAK,CAACa,MAAhB,CAAf;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,KAAK,CAACa,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACrCF,IAAAA,MAAM,CAACE,CAAD,CAAN,GAAYX,QAAQ,CAACH,KAAK,CAACc,CAAD,CAAN,CAApB;AACD;;AAED,SAAOF,MAAM,CAACG,IAAP,CAAY,EAAZ,CAAP;AACD;AACD;;;AAGA,SAASC,IAAT,CAAchB,KAAd,EAAqBiB,UAArB,EAAiC;AAC/B,mBAAUf,QAAQ,CAACF,KAAK,CAACkB,QAAN,CAAe,CAAf,EAAkBD,UAAlB,CAAD,EAAgC,CAAC,CAAjC,EAAoC,KAApC,CAAlB,mBAAgEf,QAAQ,CAACF,KAAK,CAACkB,QAAN,CAAelB,KAAK,CAACa,MAAN,GAAeI,UAA9B,CAAD,EAA4C,CAAC,CAA7C,EAAgD,KAAhD,CAAxE;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASf,QAAT,CAAkBF,KAAlB,EAA4D;AAAA,MAAnCmB,SAAmC,uEAAvB,CAAC,CAAsB;AAAA,MAAnBC,UAAmB,uEAAN,IAAM;AAC1D,MAAMC,MAAM,GAAGD,UAAU,GAAG,IAAH,GAAU,EAAnC;;AAEA,MAAI,EAAEpB,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACa,MAAtD,CAAJ,EAAmE;AACjE,WAAOQ,MAAP;AACD;;AAED,MAAMC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUL,SAAS,GAAG,CAAtB,CAAnB;AACA,SAAOE,MAAM,IAAIC,UAAU,GAAG,CAAb,IAAkBtB,KAAK,CAACa,MAAN,GAAeS,UAAjC,GAA8CN,IAAI,CAAChB,KAAD,EAAQuB,IAAI,CAACC,IAAL,CAAUF,UAAU,GAAG,CAAvB,CAAR,CAAlD,GAAuFX,OAAO,CAACX,KAAD,CAAlG,CAAb;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = u8aToHex;\n// Copyright 2017-2020 @polkadot/util authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst ALPHABET = new Array(256).fill(0).map((_, n) => n.toString(16).padStart(2, '0'));\n/** @internal */\n\nfunction extract(value) {\n  const result = new Array(value.length);\n\n  for (let i = 0; i < value.length; i++) {\n    result[i] = ALPHABET[value[i]];\n  }\n\n  return result.join('');\n}\n/** @internal */\n\n\nfunction trim(value, halfLength) {\n  return `${u8aToHex(value.subarray(0, halfLength), -1, false)}â€¦${u8aToHex(value.subarray(value.length - halfLength), -1, false)}`;\n}\n/**\n * @name u8aToHex\n * @summary Creates a hex string from a Uint8Array object.\n * @description\n * `UInt8Array` input values return the actual hex string. `null` or `undefined` values returns an `0x` string.\n * @example\n * <BR>\n *\n * ```javascript\n * import { u8aToHex } from '@polkadot/util';\n *\n * u8aToHex(new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0xf])); // 0x68656c0f\n * ```\n */\n\n\nfunction u8aToHex(value, bitLength = -1, isPrefixed = true) {\n  const prefix = isPrefixed ? '0x' : '';\n\n  if (!(value === null || value === void 0 ? void 0 : value.length)) {\n    return prefix;\n  }\n\n  const byteLength = Math.ceil(bitLength / 8);\n  return prefix + (byteLength > 0 && value.length > byteLength ? trim(value, Math.ceil(byteLength / 2)) : extract(value));\n}"]},"metadata":{},"sourceType":"script"}