{"ast":null,"code":"// Copyright 2019-2020 @polkadot/wasm-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst {\n  assert,\n  stringToU8a,\n  u8aToString\n} = require('@polkadot/util');\n\nlet wasm;\nlet cachegetInt32 = null;\nlet cachegetUint8 = null;\n\nasync function initWasm(wasmBytes, asmFn, wbg) {\n  try {\n    assert(typeof WebAssembly !== 'undefined' && wasmBytes && wasmBytes.length, 'WebAssembly is not available in your environment');\n    const source = await WebAssembly.instantiate(wasmBytes, {\n      wbg\n    });\n    wasm = source.instance.exports;\n  } catch (error) {\n    // if we have a valid supplied asm.js, return that\n    if (asmFn) {\n      wasm = asmFn(wbg);\n    } else {\n      console.error('ERROR: Unable to initialize @polkadot/wasm-crypto');\n      console.error(error);\n      wasm = null;\n    }\n  }\n}\n\nfunction withWasm(fn) {\n  return (...params) => {\n    assert(wasm, '@polkadot/wasm-crypto has not been initialized. Ensure that you wait for the initialization Promise with waitReady() (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.');\n    return fn(wasm, ...params);\n  };\n}\n\nfunction getWasm() {\n  return wasm;\n}\n\nfunction getInt32() {\n  if (cachegetInt32 === null || cachegetInt32.buffer !== wasm.memory.buffer) {\n    cachegetInt32 = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32;\n}\n\nfunction getUint8() {\n  if (cachegetUint8 === null || cachegetUint8.buffer !== wasm.memory.buffer) {\n    cachegetUint8 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8;\n}\n\nfunction getU8a(ptr, len) {\n  return getUint8().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction getString(ptr, len) {\n  return u8aToString(getU8a(ptr, len));\n}\n\nfunction allocU8a(arg) {\n  const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n\n  getUint8().set(arg, ptr / 1);\n  return [ptr, arg.length];\n}\n\nfunction allocString(arg) {\n  return allocU8a(stringToU8a(arg));\n}\n\nfunction resultU8a() {\n  const r0 = getInt32()[8 / 4 + 0];\n  const r1 = getInt32()[8 / 4 + 1];\n  const ret = getU8a(r0, r1).slice();\n\n  wasm.__wbindgen_free(r0, r1 * 1);\n\n  return ret;\n}\n\nfunction resultString() {\n  return u8aToString(resultU8a());\n}\n\nmodule.exports = {\n  allocString,\n  allocU8a,\n  getInt32,\n  getString,\n  getU8a,\n  getWasm,\n  initWasm,\n  resultString,\n  resultU8a,\n  withWasm\n};","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/metadata/node_modules/@polkadot/wasm-crypto/bridge.js"],"names":["assert","stringToU8a","u8aToString","require","wasm","cachegetInt32","cachegetUint8","initWasm","wasmBytes","asmFn","wbg","WebAssembly","length","source","instantiate","instance","exports","error","console","withWasm","fn","params","getWasm","getInt32","buffer","memory","Int32Array","getUint8","Uint8Array","getU8a","ptr","len","subarray","getString","allocU8a","arg","__wbindgen_malloc","set","allocString","resultU8a","r0","r1","ret","slice","__wbindgen_free","resultString","module"],"mappings":"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","sourcesContent":["// Copyright 2019-2020 @polkadot/wasm-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\nconst { assert, stringToU8a, u8aToString } = require('@polkadot/util');\n\nlet wasm;\nlet cachegetInt32 = null;\nlet cachegetUint8 = null;\n\nasync function initWasm (wasmBytes, asmFn, wbg) {\n  try {\n    assert(typeof WebAssembly !== 'undefined' && wasmBytes && wasmBytes.length, 'WebAssembly is not available in your environment');\n\n    const source = await WebAssembly.instantiate(wasmBytes, { wbg });\n\n    wasm = source.instance.exports;\n  } catch (error) {\n    // if we have a valid supplied asm.js, return that\n    if (asmFn) {\n      wasm = asmFn(wbg);\n    } else {\n      console.error('ERROR: Unable to initialize @polkadot/wasm-crypto');\n      console.error(error);\n\n      wasm = null;\n    }\n  }\n}\n\nfunction withWasm (fn) {\n  return (...params) => {\n    assert(wasm, '@polkadot/wasm-crypto has not been initialized. Ensure that you wait for the initialization Promise with waitReady() (or cryptoWaitReady() from @polkadot/util-crypto) before attempting to use WASM-only interfaces.');\n\n    return fn(wasm, ...params);\n  };\n}\n\nfunction getWasm () {\n  return wasm;\n}\n\nfunction getInt32 () {\n  if (cachegetInt32 === null || cachegetInt32.buffer !== wasm.memory.buffer) {\n    cachegetInt32 = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32;\n}\n\nfunction getUint8 () {\n  if (cachegetUint8 === null || cachegetUint8.buffer !== wasm.memory.buffer) {\n    cachegetUint8 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8;\n}\n\nfunction getU8a (ptr, len) {\n  return getUint8().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction getString (ptr, len) {\n  return u8aToString(getU8a(ptr, len));\n}\n\nfunction allocU8a (arg) {\n  const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n\n  getUint8().set(arg, ptr / 1);\n\n  return [ptr, arg.length];\n}\n\nfunction allocString (arg) {\n  return allocU8a(stringToU8a(arg));\n}\n\nfunction resultU8a () {\n  const r0 = getInt32()[8 / 4 + 0];\n  const r1 = getInt32()[8 / 4 + 1];\n  const ret = getU8a(r0, r1).slice();\n\n  wasm.__wbindgen_free(r0, r1 * 1);\n\n  return ret;\n}\n\nfunction resultString () {\n  return u8aToString(resultU8a());\n}\n\nmodule.exports = {\n  allocString,\n  allocU8a,\n  getInt32,\n  getString,\n  getU8a,\n  getWasm,\n  initWasm,\n  resultString,\n  resultU8a,\n  withWasm\n};\n"]},"metadata":{},"sourceType":"script"}