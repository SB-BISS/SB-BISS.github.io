{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateChars = validateChars;\nexports.default = base58Validate;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _bs = require(\"./bs58\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst BASE_CONFIG = {\n  alphabet: _bs.BASE58_ALPHABET,\n  ipfsChar: 'z',\n  type: 'base58'\n};\n\nfunction validateChars({\n  alphabet,\n  ipfsChar,\n  type\n}, value, ipfsCompat) {\n  (0, _util.assert)(value, `Expected non-null, non-empty ${type} input`);\n  (0, _util.assert)(!ipfsCompat || value[0] === ipfsChar, `Expected ${type} to start with '${ipfsChar}'`);\n\n  for (let i = ipfsCompat ? 1 : 0; i < value.length; i++) {\n    (0, _util.assert)(alphabet.includes(value[i]), `Invalid ${type} character \"${value[i]}\" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);\n  }\n\n  return true;\n}\n/**\n * @name base58Validate\n * @summary Validates a base58 value.\n * @description\n * Validates the the supplied value is valid base58\n */\n\n\nfunction base58Validate(value, ipfsCompat) {\n  return validateChars(BASE_CONFIG, value, ipfsCompat);\n}","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/api/node_modules/@polkadot/util-crypto/base58/validate.js"],"names":["Object","defineProperty","exports","value","validateChars","default","base58Validate","_util","require","_bs","BASE_CONFIG","alphabet","BASE58_ALPHABET","ipfsChar","type","ipfsCompat","assert","i","length","includes","charCodeAt","toString"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACAF,OAAO,CAACG,OAAR,GAAkBC,cAAlB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,gBAAD,CAAnB;;AAEA,IAAIC,GAAG,GAAGD,OAAO,CAAC,QAAD,CAAjB,C,CAEA;AACA;;;AACA,MAAME,WAAW,GAAG;AAClBC,EAAAA,QAAQ,EAAEF,GAAG,CAACG,eADI;AAElBC,EAAAA,QAAQ,EAAE,GAFQ;AAGlBC,EAAAA,IAAI,EAAE;AAHY,CAApB;;AAMA,SAASV,aAAT,CAAuB;AACrBO,EAAAA,QADqB;AAErBE,EAAAA,QAFqB;AAGrBC,EAAAA;AAHqB,CAAvB,EAIGX,KAJH,EAIUY,UAJV,EAIsB;AACpB,GAAC,GAAGR,KAAK,CAACS,MAAV,EAAkBb,KAAlB,EAA0B,gCAA+BW,IAAK,QAA9D;AACA,GAAC,GAAGP,KAAK,CAACS,MAAV,EAAkB,CAACD,UAAD,IAAeZ,KAAK,CAAC,CAAD,CAAL,KAAaU,QAA9C,EAAyD,YAAWC,IAAK,mBAAkBD,QAAS,GAApG;;AAEA,OAAK,IAAII,CAAC,GAAGF,UAAU,GAAG,CAAH,GAAO,CAA9B,EAAiCE,CAAC,GAAGd,KAAK,CAACe,MAA3C,EAAmDD,CAAC,EAApD,EAAwD;AACtD,KAAC,GAAGV,KAAK,CAACS,MAAV,EAAkBL,QAAQ,CAACQ,QAAT,CAAkBhB,KAAK,CAACc,CAAD,CAAvB,CAAlB,EAAgD,WAAUH,IAAK,eAAcX,KAAK,CAACc,CAAD,CAAI,QAAOd,KAAK,CAACiB,UAAN,CAAiBH,CAAjB,EAAoBI,QAApB,CAA6B,EAA7B,CAAiC,cAAaJ,CAAE,EAA7I;AACD;;AAED,SAAO,IAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASX,cAAT,CAAwBH,KAAxB,EAA+BY,UAA/B,EAA2C;AACzC,SAAOX,aAAa,CAACM,WAAD,EAAcP,KAAd,EAAqBY,UAArB,CAApB;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateChars = validateChars;\nexports.default = base58Validate;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _bs = require(\"./bs58\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst BASE_CONFIG = {\n  alphabet: _bs.BASE58_ALPHABET,\n  ipfsChar: 'z',\n  type: 'base58'\n};\n\nfunction validateChars({\n  alphabet,\n  ipfsChar,\n  type\n}, value, ipfsCompat) {\n  (0, _util.assert)(value, `Expected non-null, non-empty ${type} input`);\n  (0, _util.assert)(!ipfsCompat || value[0] === ipfsChar, `Expected ${type} to start with '${ipfsChar}'`);\n\n  for (let i = ipfsCompat ? 1 : 0; i < value.length; i++) {\n    (0, _util.assert)(alphabet.includes(value[i]), `Invalid ${type} character \"${value[i]}\" (0x${value.charCodeAt(i).toString(16)}) at index ${i}`);\n  }\n\n  return true;\n}\n/**\n * @name base58Validate\n * @summary Validates a base58 value.\n * @description\n * Validates the the supplied value is valid base58\n */\n\n\nfunction base58Validate(value, ipfsCompat) {\n  return validateChars(BASE_CONFIG, value, ipfsCompat);\n}"]},"metadata":{},"sourceType":"script"}