{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.DEFAULT_UINT_BITS = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst DEFAULT_UINT_BITS = 64;\nexports.DEFAULT_UINT_BITS = DEFAULT_UINT_BITS;\nconst MUL_P = new _bn.default(10000);\nconst FORMATTERS = [['Perquintill', new _bn.default(1000000000000)], ['Perbill', new _bn.default(1000000000)], ['Permill', new _bn.default(1000000)], ['Percent', new _bn.default(100)]];\n\nfunction toPercentage(value, divisor) {\n  return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;\n}\n/** @internal */\n\n\nfunction decodeAbstracIntU8a(value, bitLength, isNegative) {\n  if (!value.length) {\n    return '0';\n  }\n\n  try {\n    // NOTE When passing u8a in (typically from decoded data), it is always Little Endian\n    return (0, _util.u8aToBn)(value.subarray(0, bitLength / 8), {\n      isLe: true,\n      isNegative\n    }).toString();\n  } catch (error) {\n    throw new Error(`AbstractInt: failed on ${JSON.stringify(value)}:: ${error.message}`);\n  }\n}\n/** @internal */\n\n\nfunction decodeAbstractInt(value, bitLength, isNegative) {\n  // This function returns a string, which will be passed in the BN\n  // constructor. It would be ideal to actually return a BN, but there's a\n  // bug: https://github.com/indutny/bn.js/issues/206.\n  if ((0, _util.isHex)(value, -1, true)) {\n    return (0, _util.hexToBn)(value, {\n      isLe: false,\n      isNegative\n    }).toString();\n  } else if ((0, _util.isU8a)(value)) {\n    return decodeAbstracIntU8a(value, bitLength, isNegative);\n  } else if ((0, _util.isString)(value)) {\n    return new _bn.default(value.toString(), 10).toString();\n  }\n\n  return (0, _util.bnToBn)(value).toString();\n}\n/**\n * @name AbstractInt\n * @ignore\n * @noInheritDoc\n */\n// TODO:\n//   - Apart from encoding/decoding we don't actually keep check on the sizes, is this good enough?\n\n\nvar _bitLength = (0, _classPrivateFieldLooseKey2.default)(\"bitLength\");\n\nvar _isSigned = (0, _classPrivateFieldLooseKey2.default)(\"isSigned\");\n\nclass AbstractInt extends _bn.default {\n  constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {\n    super(decodeAbstractInt(value, bitLength, isSigned));\n    this.registry = void 0;\n    Object.defineProperty(this, _bitLength, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isSigned, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] = bitLength;\n    (0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned] = isSigned;\n    (0, _util.assert)(isSigned || this.gte(_util.BN_ZERO), `${this.toRawType()}: Negative number passed to unsigned type`);\n    (0, _util.assert)(super.bitLength() <= bitLength, `${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${bitLength}`);\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] / 8;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is a zero value (align elsewhere)\n   */\n\n\n  get isEmpty() {\n    return this.isZero();\n  }\n  /**\n   * @description Checks if the value is an unsigned type\n   */\n\n\n  get isUnsigned() {\n    return !(0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned];\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n\n\n  bitLength() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength];\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  eq(other) {\n    // Here we are actually overriding the built-in .eq to take care of both\n    // number and BN inputs (no `.eqn` needed) - numbers will be converted\n    return super.eq((0, _util.isHex)(other) ? (0, _util.hexToBn)(other.toString(), {\n      isLe: false,\n      isNegative: (0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned]\n    }) : (0, _util.bnToBn)(other));\n  }\n  /**\n   * @description True if this value is the max of the type\n   */\n\n\n  isMax() {\n    const u8a = this.toU8a().filter(byte => byte === 0xff);\n    return u8a.length === (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] / 8;\n  }\n  /**\n   * @description Returns a BigInt representation of the number\n   */\n\n\n  toBigInt() {\n    return BigInt(this.toString());\n  }\n  /**\n   * @description Returns the BN representation of the number. (Compatibility)\n   */\n\n\n  toBn() {\n    return this;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex(isLe = false) {\n    // For display/JSON, this is BE, for compare, use isLe\n    return (0, _util.bnToHex)(this, {\n      bitLength: this.bitLength(),\n      isLe,\n      isNegative: !this.isUnsigned\n    });\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toHuman(isExpanded) {\n    const rawType = this.toRawType();\n\n    if (rawType === 'Balance') {\n      return this.isMax() ? 'everything' : (0, _util.formatBalance)(this, {\n        decimals: this.registry.chainDecimals,\n        withSi: true,\n        withUnit: this.registry.chainToken\n      });\n    }\n\n    const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];\n    return divisor ? toPercentage(this, divisor) : (0, _util.formatNumber)(this);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    // FIXME this return type should by string | number, but BN's return type\n    // is string.\n    // Maximum allowed integer for JS is 2^53 - 1, set limit at 52\n    return super.bitLength() > 52 ? this.toHex() : this.toNumber();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    // NOTE In the case of balances, which have a special meaning on the UI\n    // and can be interpreted differently, return a specific value for it so\n    // underlying it always matches (no matter which length it actually is)\n    return this instanceof this.registry.createClass('Balance') ? 'Balance' : `${this.isUnsigned ? 'u' : 'i'}${this.bitLength()}`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   * @param base The base to use for the conversion\n   */\n\n\n  toString(base) {\n    // only included here since we do not inherit docs\n    return super.toString(base);\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return (0, _util.bnToU8a)(this, {\n      bitLength: this.bitLength(),\n      isLe: true,\n      isNegative: !this.isUnsigned\n    });\n  }\n\n}\n\nexports.default = AbstractInt;","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/types/codec/AbstractInt.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","DEFAULT_UINT_BITS","_classPrivateFieldLooseBase2","_classPrivateFieldLooseKey2","_bn","_util","MUL_P","FORMATTERS","toPercentage","divisor","mul","div","toNumber","toFixed","decodeAbstracIntU8a","bitLength","isNegative","length","u8aToBn","subarray","isLe","toString","error","Error","JSON","stringify","message","decodeAbstractInt","isHex","hexToBn","isU8a","isString","bnToBn","_bitLength","_isSigned","AbstractInt","constructor","registry","isSigned","writable","assert","gte","BN_ZERO","toRawType","encodedLength","hash","toU8a","isEmpty","isZero","isUnsigned","eq","other","isMax","u8a","filter","byte","toBigInt","BigInt","toBn","toHex","bnToHex","toHuman","isExpanded","rawType","formatBalance","decimals","chainDecimals","withSi","withUnit","chainToken","find","type","formatNumber","toJSON","createClass","base","isBare","bnToU8a"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,iBAAR,GAA4B,KAAK,CAAnD;;AAEA,IAAIC,4BAA4B,GAAGR,sBAAsB,CAACC,OAAO,CAAC,mDAAD,CAAR,CAAzD;;AAEA,IAAIQ,2BAA2B,GAAGT,sBAAsB,CAACC,OAAO,CAAC,kDAAD,CAAR,CAAxD;;AAEA,IAAIS,GAAG,GAAGV,sBAAsB,CAACC,OAAO,CAAC,OAAD,CAAR,CAAhC;;AAEA,IAAIU,KAAK,GAAGV,OAAO,CAAC,gBAAD,CAAnB,C,CAEA;AACA;;;AACA,MAAMM,iBAAiB,GAAG,EAA1B;AACAH,OAAO,CAACG,iBAAR,GAA4BA,iBAA5B;AACA,MAAMK,KAAK,GAAG,IAAIF,GAAG,CAACJ,OAAR,CAAgB,KAAhB,CAAd;AACA,MAAMO,UAAU,GAAG,CAAC,CAAC,aAAD,EAAgB,IAAIH,GAAG,CAACJ,OAAR,CAAgB,aAAhB,CAAhB,CAAD,EAAkD,CAAC,SAAD,EAAY,IAAII,GAAG,CAACJ,OAAR,CAAgB,UAAhB,CAAZ,CAAlD,EAA4F,CAAC,SAAD,EAAY,IAAII,GAAG,CAACJ,OAAR,CAAgB,OAAhB,CAAZ,CAA5F,EAAmI,CAAC,SAAD,EAAY,IAAII,GAAG,CAACJ,OAAR,CAAgB,GAAhB,CAAZ,CAAnI,CAAnB;;AAEA,SAASQ,YAAT,CAAsBT,KAAtB,EAA6BU,OAA7B,EAAsC;AACpC,SAAQ,GAAE,CAACV,KAAK,CAACW,GAAN,CAAUJ,KAAV,EAAiBK,GAAjB,CAAqBF,OAArB,EAA8BG,QAA9B,KAA2C,GAA5C,EAAiDC,OAAjD,CAAyD,CAAzD,CAA4D,GAAtE;AACD;AACD;;;AAGA,SAASC,mBAAT,CAA6Bf,KAA7B,EAAoCgB,SAApC,EAA+CC,UAA/C,EAA2D;AACzD,MAAI,CAACjB,KAAK,CAACkB,MAAX,EAAmB;AACjB,WAAO,GAAP;AACD;;AAED,MAAI;AACF;AACA,WAAO,CAAC,GAAGZ,KAAK,CAACa,OAAV,EAAmBnB,KAAK,CAACoB,QAAN,CAAe,CAAf,EAAkBJ,SAAS,GAAG,CAA9B,CAAnB,EAAqD;AAC1DK,MAAAA,IAAI,EAAE,IADoD;AAE1DJ,MAAAA;AAF0D,KAArD,EAGJK,QAHI,EAAP;AAID,GAND,CAME,OAAOC,KAAP,EAAc;AACd,UAAM,IAAIC,KAAJ,CAAW,0BAAyBC,IAAI,CAACC,SAAL,CAAe1B,KAAf,CAAsB,MAAKuB,KAAK,CAACI,OAAQ,EAA7E,CAAN;AACD;AACF;AACD;;;AAGA,SAASC,iBAAT,CAA2B5B,KAA3B,EAAkCgB,SAAlC,EAA6CC,UAA7C,EAAyD;AACvD;AACA;AACA;AACA,MAAI,CAAC,GAAGX,KAAK,CAACuB,KAAV,EAAiB7B,KAAjB,EAAwB,CAAC,CAAzB,EAA4B,IAA5B,CAAJ,EAAuC;AACrC,WAAO,CAAC,GAAGM,KAAK,CAACwB,OAAV,EAAmB9B,KAAnB,EAA0B;AAC/BqB,MAAAA,IAAI,EAAE,KADyB;AAE/BJ,MAAAA;AAF+B,KAA1B,EAGJK,QAHI,EAAP;AAID,GALD,MAKO,IAAI,CAAC,GAAGhB,KAAK,CAACyB,KAAV,EAAiB/B,KAAjB,CAAJ,EAA6B;AAClC,WAAOe,mBAAmB,CAACf,KAAD,EAAQgB,SAAR,EAAmBC,UAAnB,CAA1B;AACD,GAFM,MAEA,IAAI,CAAC,GAAGX,KAAK,CAAC0B,QAAV,EAAoBhC,KAApB,CAAJ,EAAgC;AACrC,WAAO,IAAIK,GAAG,CAACJ,OAAR,CAAgBD,KAAK,CAACsB,QAAN,EAAhB,EAAkC,EAAlC,EAAsCA,QAAtC,EAAP;AACD;;AAED,SAAO,CAAC,GAAGhB,KAAK,CAAC2B,MAAV,EAAkBjC,KAAlB,EAAyBsB,QAAzB,EAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIY,UAAU,GAAG,CAAC,GAAG9B,2BAA2B,CAACH,OAAhC,EAAyC,WAAzC,CAAjB;;AAEA,IAAIkC,SAAS,GAAG,CAAC,GAAG/B,2BAA2B,CAACH,OAAhC,EAAyC,UAAzC,CAAhB;;AAEA,MAAMmC,WAAN,SAA0B/B,GAAG,CAACJ,OAA9B,CAAsC;AACpCoC,EAAAA,WAAW,CAACC,QAAD,EAAWtC,KAAK,GAAG,CAAnB,EAAsBgB,SAAS,GAAGd,iBAAlC,EAAqDqC,QAAQ,GAAG,KAAhE,EAAuE;AAChF,UAAMX,iBAAiB,CAAC5B,KAAD,EAAQgB,SAAR,EAAmBuB,QAAnB,CAAvB;AACA,SAAKD,QAAL,GAAgB,KAAK,CAArB;AACAzC,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BoC,UAA5B,EAAwC;AACtCM,MAAAA,QAAQ,EAAE,IAD4B;AAEtCxC,MAAAA,KAAK,EAAE,KAAK;AAF0B,KAAxC;AAIAH,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BqC,SAA5B,EAAuC;AACrCK,MAAAA,QAAQ,EAAE,IAD2B;AAErCxC,MAAAA,KAAK,EAAE,KAAK;AAFyB,KAAvC;AAIA,SAAKsC,QAAL,GAAgBA,QAAhB;AACA,KAAC,GAAGnC,4BAA4B,CAACF,OAAjC,EAA0C,IAA1C,EAAgDiC,UAAhD,EAA4DA,UAA5D,IAA0ElB,SAA1E;AACA,KAAC,GAAGb,4BAA4B,CAACF,OAAjC,EAA0C,IAA1C,EAAgDkC,SAAhD,EAA2DA,SAA3D,IAAwEI,QAAxE;AACA,KAAC,GAAGjC,KAAK,CAACmC,MAAV,EAAkBF,QAAQ,IAAI,KAAKG,GAAL,CAASpC,KAAK,CAACqC,OAAf,CAA9B,EAAwD,GAAE,KAAKC,SAAL,EAAiB,2CAA3E;AACA,KAAC,GAAGtC,KAAK,CAACmC,MAAV,EAAkB,MAAMzB,SAAN,MAAqBA,SAAvC,EAAmD,GAAE,KAAK4B,SAAL,EAAiB,uCAAsC,MAAM5B,SAAN,EAAkB,mBAAkBA,SAAU,EAA1J;AACD;AACD;AACF;AACA;;;AAGE,MAAI6B,aAAJ,GAAoB;AAClB,WAAO,CAAC,GAAG1C,4BAA4B,CAACF,OAAjC,EAA0C,IAA1C,EAAgDiC,UAAhD,EAA4DA,UAA5D,IAA0E,CAAjF;AACD;AACD;AACF;AACA;;;AAGE,MAAIY,IAAJ,GAAW;AACT,WAAO,KAAKR,QAAL,CAAcQ,IAAd,CAAmB,KAAKC,KAAL,EAAnB,CAAP;AACD;AACD;AACF;AACA;;;AAGE,MAAIC,OAAJ,GAAc;AACZ,WAAO,KAAKC,MAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGE,MAAIC,UAAJ,GAAiB;AACf,WAAO,CAAC,CAAC,GAAG/C,4BAA4B,CAACF,OAAjC,EAA0C,IAA1C,EAAgDkC,SAAhD,EAA2DA,SAA3D,CAAR;AACD;AACD;AACF;AACA;;;AAGEnB,EAAAA,SAAS,GAAG;AACV,WAAO,CAAC,GAAGb,4BAA4B,CAACF,OAAjC,EAA0C,IAA1C,EAAgDiC,UAAhD,EAA4DA,UAA5D,CAAP;AACD;AACD;AACF;AACA;AACE;;;AAGAiB,EAAAA,EAAE,CAACC,KAAD,EAAQ;AACR;AACA;AACA,WAAO,MAAMD,EAAN,CAAS,CAAC,GAAG7C,KAAK,CAACuB,KAAV,EAAiBuB,KAAjB,IAA0B,CAAC,GAAG9C,KAAK,CAACwB,OAAV,EAAmBsB,KAAK,CAAC9B,QAAN,EAAnB,EAAqC;AAC7ED,MAAAA,IAAI,EAAE,KADuE;AAE7EJ,MAAAA,UAAU,EAAE,CAAC,GAAGd,4BAA4B,CAACF,OAAjC,EAA0C,IAA1C,EAAgDkC,SAAhD,EAA2DA,SAA3D;AAFiE,KAArC,CAA1B,GAGX,CAAC,GAAG7B,KAAK,CAAC2B,MAAV,EAAkBmB,KAAlB,CAHE,CAAP;AAID;AACD;AACF;AACA;;;AAGEC,EAAAA,KAAK,GAAG;AACN,UAAMC,GAAG,GAAG,KAAKP,KAAL,GAAaQ,MAAb,CAAoBC,IAAI,IAAIA,IAAI,KAAK,IAArC,CAAZ;AACA,WAAOF,GAAG,CAACpC,MAAJ,KAAe,CAAC,GAAGf,4BAA4B,CAACF,OAAjC,EAA0C,IAA1C,EAAgDiC,UAAhD,EAA4DA,UAA5D,IAA0E,CAAhG;AACD;AACD;AACF;AACA;;;AAGEuB,EAAAA,QAAQ,GAAG;AACT,WAAOC,MAAM,CAAC,KAAKpC,QAAL,EAAD,CAAb;AACD;AACD;AACF;AACA;;;AAGEqC,EAAAA,IAAI,GAAG;AACL,WAAO,IAAP;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,KAAK,CAACvC,IAAI,GAAG,KAAR,EAAe;AAClB;AACA,WAAO,CAAC,GAAGf,KAAK,CAACuD,OAAV,EAAmB,IAAnB,EAAyB;AAC9B7C,MAAAA,SAAS,EAAE,KAAKA,SAAL,EADmB;AAE9BK,MAAAA,IAF8B;AAG9BJ,MAAAA,UAAU,EAAE,CAAC,KAAKiC;AAHY,KAAzB,CAAP;AAKD;AACD;AACF;AACA;AACE;;;AAGAY,EAAAA,OAAO,CAACC,UAAD,EAAa;AAClB,UAAMC,OAAO,GAAG,KAAKpB,SAAL,EAAhB;;AAEA,QAAIoB,OAAO,KAAK,SAAhB,EAA2B;AACzB,aAAO,KAAKX,KAAL,KAAe,YAAf,GAA8B,CAAC,GAAG/C,KAAK,CAAC2D,aAAV,EAAyB,IAAzB,EAA+B;AAClEC,QAAAA,QAAQ,EAAE,KAAK5B,QAAL,CAAc6B,aAD0C;AAElEC,QAAAA,MAAM,EAAE,IAF0D;AAGlEC,QAAAA,QAAQ,EAAE,KAAK/B,QAAL,CAAcgC;AAH0C,OAA/B,CAArC;AAKD;;AAED,UAAM,GAAG5D,OAAH,IAAcF,UAAU,CAAC+D,IAAX,CAAgB,CAAC,CAACC,IAAD,CAAD,KAAYA,IAAI,KAAKR,OAArC,KAAiD,EAArE;AACA,WAAOtD,OAAO,GAAGD,YAAY,CAAC,IAAD,EAAOC,OAAP,CAAf,GAAiC,CAAC,GAAGJ,KAAK,CAACmE,YAAV,EAAwB,IAAxB,CAA/C;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA,WAAO,MAAM1D,SAAN,KAAoB,EAApB,GAAyB,KAAK4C,KAAL,EAAzB,GAAwC,KAAK/C,QAAL,EAA/C;AACD;AACD;AACF;AACA;;;AAGE+B,EAAAA,SAAS,GAAG;AACV;AACA;AACA;AACA,WAAO,gBAAgB,KAAKN,QAAL,CAAcqC,WAAd,CAA0B,SAA1B,CAAhB,GAAuD,SAAvD,GAAoE,GAAE,KAAKzB,UAAL,GAAkB,GAAlB,GAAwB,GAAI,GAAE,KAAKlC,SAAL,EAAiB,EAA5H;AACD;AACD;AACF;AACA;AACA;;;AAGEM,EAAAA,QAAQ,CAACsD,IAAD,EAAO;AACb;AACA,WAAO,MAAMtD,QAAN,CAAesD,IAAf,CAAP;AACD;AACD;AACF;AACA;AACA;AACE;;;AAGA7B,EAAAA,KAAK,CAAC8B,MAAD,EAAS;AACZ,WAAO,CAAC,GAAGvE,KAAK,CAACwE,OAAV,EAAmB,IAAnB,EAAyB;AAC9B9D,MAAAA,SAAS,EAAE,KAAKA,SAAL,EADmB;AAE9BK,MAAAA,IAAI,EAAE,IAFwB;AAG9BJ,MAAAA,UAAU,EAAE,CAAC,KAAKiC;AAHY,KAAzB,CAAP;AAKD;;AA/KmC;;AAmLtCnD,OAAO,CAACE,OAAR,GAAkBmC,WAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.DEFAULT_UINT_BITS = void 0;\n\nvar _classPrivateFieldLooseBase2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseBase\"));\n\nvar _classPrivateFieldLooseKey2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classPrivateFieldLooseKey\"));\n\nvar _bn = _interopRequireDefault(require(\"bn.js\"));\n\nvar _util = require(\"@polkadot/util\");\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst DEFAULT_UINT_BITS = 64;\nexports.DEFAULT_UINT_BITS = DEFAULT_UINT_BITS;\nconst MUL_P = new _bn.default(10000);\nconst FORMATTERS = [['Perquintill', new _bn.default(1000000000000)], ['Perbill', new _bn.default(1000000000)], ['Permill', new _bn.default(1000000)], ['Percent', new _bn.default(100)]];\n\nfunction toPercentage(value, divisor) {\n  return `${(value.mul(MUL_P).div(divisor).toNumber() / 100).toFixed(2)}%`;\n}\n/** @internal */\n\n\nfunction decodeAbstracIntU8a(value, bitLength, isNegative) {\n  if (!value.length) {\n    return '0';\n  }\n\n  try {\n    // NOTE When passing u8a in (typically from decoded data), it is always Little Endian\n    return (0, _util.u8aToBn)(value.subarray(0, bitLength / 8), {\n      isLe: true,\n      isNegative\n    }).toString();\n  } catch (error) {\n    throw new Error(`AbstractInt: failed on ${JSON.stringify(value)}:: ${error.message}`);\n  }\n}\n/** @internal */\n\n\nfunction decodeAbstractInt(value, bitLength, isNegative) {\n  // This function returns a string, which will be passed in the BN\n  // constructor. It would be ideal to actually return a BN, but there's a\n  // bug: https://github.com/indutny/bn.js/issues/206.\n  if ((0, _util.isHex)(value, -1, true)) {\n    return (0, _util.hexToBn)(value, {\n      isLe: false,\n      isNegative\n    }).toString();\n  } else if ((0, _util.isU8a)(value)) {\n    return decodeAbstracIntU8a(value, bitLength, isNegative);\n  } else if ((0, _util.isString)(value)) {\n    return new _bn.default(value.toString(), 10).toString();\n  }\n\n  return (0, _util.bnToBn)(value).toString();\n}\n/**\n * @name AbstractInt\n * @ignore\n * @noInheritDoc\n */\n// TODO:\n//   - Apart from encoding/decoding we don't actually keep check on the sizes, is this good enough?\n\n\nvar _bitLength = (0, _classPrivateFieldLooseKey2.default)(\"bitLength\");\n\nvar _isSigned = (0, _classPrivateFieldLooseKey2.default)(\"isSigned\");\n\nclass AbstractInt extends _bn.default {\n  constructor(registry, value = 0, bitLength = DEFAULT_UINT_BITS, isSigned = false) {\n    super(decodeAbstractInt(value, bitLength, isSigned));\n    this.registry = void 0;\n    Object.defineProperty(this, _bitLength, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isSigned, {\n      writable: true,\n      value: void 0\n    });\n    this.registry = registry;\n    (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] = bitLength;\n    (0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned] = isSigned;\n    (0, _util.assert)(isSigned || this.gte(_util.BN_ZERO), `${this.toRawType()}: Negative number passed to unsigned type`);\n    (0, _util.assert)(super.bitLength() <= bitLength, `${this.toRawType()}: Input too large. Found input with ${super.bitLength()} bits, expected ${bitLength}`);\n  }\n  /**\n   * @description The length of the value when encoded as a Uint8Array\n   */\n\n\n  get encodedLength() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] / 8;\n  }\n  /**\n   * @description returns a hash of the contents\n   */\n\n\n  get hash() {\n    return this.registry.hash(this.toU8a());\n  }\n  /**\n   * @description Checks if the value is a zero value (align elsewhere)\n   */\n\n\n  get isEmpty() {\n    return this.isZero();\n  }\n  /**\n   * @description Checks if the value is an unsigned type\n   */\n\n\n  get isUnsigned() {\n    return !(0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned];\n  }\n  /**\n   * @description Returns the number of bits in the value\n   */\n\n\n  bitLength() {\n    return (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength];\n  }\n  /**\n   * @description Compares the value of the input to see if there is a match\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  eq(other) {\n    // Here we are actually overriding the built-in .eq to take care of both\n    // number and BN inputs (no `.eqn` needed) - numbers will be converted\n    return super.eq((0, _util.isHex)(other) ? (0, _util.hexToBn)(other.toString(), {\n      isLe: false,\n      isNegative: (0, _classPrivateFieldLooseBase2.default)(this, _isSigned)[_isSigned]\n    }) : (0, _util.bnToBn)(other));\n  }\n  /**\n   * @description True if this value is the max of the type\n   */\n\n\n  isMax() {\n    const u8a = this.toU8a().filter(byte => byte === 0xff);\n    return u8a.length === (0, _classPrivateFieldLooseBase2.default)(this, _bitLength)[_bitLength] / 8;\n  }\n  /**\n   * @description Returns a BigInt representation of the number\n   */\n\n\n  toBigInt() {\n    return BigInt(this.toString());\n  }\n  /**\n   * @description Returns the BN representation of the number. (Compatibility)\n   */\n\n\n  toBn() {\n    return this;\n  }\n  /**\n   * @description Returns a hex string representation of the value\n   */\n\n\n  toHex(isLe = false) {\n    // For display/JSON, this is BE, for compare, use isLe\n    return (0, _util.bnToHex)(this, {\n      bitLength: this.bitLength(),\n      isLe,\n      isNegative: !this.isUnsigned\n    });\n  }\n  /**\n   * @description Converts the Object to to a human-friendly JSON, with additional fields, expansion and formatting of information\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toHuman(isExpanded) {\n    const rawType = this.toRawType();\n\n    if (rawType === 'Balance') {\n      return this.isMax() ? 'everything' : (0, _util.formatBalance)(this, {\n        decimals: this.registry.chainDecimals,\n        withSi: true,\n        withUnit: this.registry.chainToken\n      });\n    }\n\n    const [, divisor] = FORMATTERS.find(([type]) => type === rawType) || [];\n    return divisor ? toPercentage(this, divisor) : (0, _util.formatNumber)(this);\n  }\n  /**\n   * @description Converts the Object to JSON, typically used for RPC transfers\n   */\n\n\n  toJSON() {\n    // FIXME this return type should by string | number, but BN's return type\n    // is string.\n    // Maximum allowed integer for JS is 2^53 - 1, set limit at 52\n    return super.bitLength() > 52 ? this.toHex() : this.toNumber();\n  }\n  /**\n   * @description Returns the base runtime type name for this instance\n   */\n\n\n  toRawType() {\n    // NOTE In the case of balances, which have a special meaning on the UI\n    // and can be interpreted differently, return a specific value for it so\n    // underlying it always matches (no matter which length it actually is)\n    return this instanceof this.registry.createClass('Balance') ? 'Balance' : `${this.isUnsigned ? 'u' : 'i'}${this.bitLength()}`;\n  }\n  /**\n   * @description Returns the string representation of the value\n   * @param base The base to use for the conversion\n   */\n\n\n  toString(base) {\n    // only included here since we do not inherit docs\n    return super.toString(base);\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   * @param isBare true when the value has none of the type-specific prefixes (internal)\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  toU8a(isBare) {\n    return (0, _util.bnToU8a)(this, {\n      bitLength: this.bitLength(),\n      isLe: true,\n      isNegative: !this.isUnsigned\n    });\n  }\n\n}\n\nexports.default = AbstractInt;"]},"metadata":{},"sourceType":"script"}