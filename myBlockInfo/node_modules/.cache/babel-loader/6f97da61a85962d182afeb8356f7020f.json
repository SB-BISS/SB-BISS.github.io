{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1KeypairFromSeed;\n\nvar _elliptic = require(\"elliptic\");\n\nvar _util = require(\"@polkadot/util\"); // Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst ec = new _elliptic.ec('secp256k1');\n/**\n * @name secp256k1KeypairFromSeed\n * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.\n */\n\nfunction secp256k1KeypairFromSeed(seed) {\n  (0, _util.assert)(seed.length === 32, 'Expected valid 32-byte private key as a seed');\n  const key = ec.keyFromPrivate(seed);\n  return {\n    publicKey: new Uint8Array(key.getPublic().encodeCompressed()),\n    secretKey: (0, _util.bnToU8a)(key.getPrivate(), {\n      bitLength: 256,\n      isLe: false\n    })\n  };\n}","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/types/node_modules/@polkadot/util-crypto/secp256k1/keypair/fromSeed.js"],"names":["Object","defineProperty","exports","value","default","secp256k1KeypairFromSeed","_elliptic","require","_util","ec","seed","assert","length","key","keyFromPrivate","publicKey","Uint8Array","getPublic","encodeCompressed","secretKey","bnToU8a","getPrivate","bitLength","isLe"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,wBAAlB;;AAEA,IAAIC,SAAS,GAAGC,OAAO,CAAC,UAAD,CAAvB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,gBAAD,CAAnB,C,CAEA;AACA;;;AACA,MAAME,EAAE,GAAG,IAAIH,SAAS,CAACG,EAAd,CAAiB,WAAjB,CAAX;AACA;AACA;AACA;AACA;;AAEA,SAASJ,wBAAT,CAAkCK,IAAlC,EAAwC;AACtC,GAAC,GAAGF,KAAK,CAACG,MAAV,EAAkBD,IAAI,CAACE,MAAL,KAAgB,EAAlC,EAAsC,8CAAtC;AACA,QAAMC,GAAG,GAAGJ,EAAE,CAACK,cAAH,CAAkBJ,IAAlB,CAAZ;AACA,SAAO;AACLK,IAAAA,SAAS,EAAE,IAAIC,UAAJ,CAAeH,GAAG,CAACI,SAAJ,GAAgBC,gBAAhB,EAAf,CADN;AAELC,IAAAA,SAAS,EAAE,CAAC,GAAGX,KAAK,CAACY,OAAV,EAAmBP,GAAG,CAACQ,UAAJ,EAAnB,EAAqC;AAC9CC,MAAAA,SAAS,EAAE,GADmC;AAE9CC,MAAAA,IAAI,EAAE;AAFwC,KAArC;AAFN,GAAP;AAOD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = secp256k1KeypairFromSeed;\n\nvar _elliptic = require(\"elliptic\");\n\nvar _util = require(\"@polkadot/util\");\n\n// Copyright 2017-2020 @polkadot/util-crypto authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst ec = new _elliptic.ec('secp256k1');\n/**\n * @name secp256k1KeypairFromSeed\n * @description Returns a object containing a `publicKey` & `secretKey` generated from the supplied seed.\n */\n\nfunction secp256k1KeypairFromSeed(seed) {\n  (0, _util.assert)(seed.length === 32, 'Expected valid 32-byte private key as a seed');\n  const key = ec.keyFromPrivate(seed);\n  return {\n    publicKey: new Uint8Array(key.getPublic().encodeCompressed()),\n    secretKey: (0, _util.bnToU8a)(key.getPrivate(), {\n      bitLength: 256,\n      isLe: false\n    })\n  };\n}"]},"metadata":{},"sourceType":"script"}