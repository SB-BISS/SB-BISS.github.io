{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Enum = _interopRequireDefault(require(\"../codec/Enum\")); // Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\n\n\nfunction decodeDataU8a(registry, value) {\n  const indicator = value[0];\n\n  if (!indicator) {\n    return [undefined, undefined];\n  } else if (indicator >= 1 && indicator <= 33) {\n    const length = indicator - 1;\n    const data = value.subarray(1, length + 1); // in this case, we are passing a Raw back (since we have no length)\n\n    return [registry.createType('Raw', data), 1];\n  } else if (indicator >= 34 && indicator <= 37) {\n    return [value.subarray(1, 32 + 1), indicator - 32]; // 34 becomes 2\n  }\n\n  throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);\n}\n/** @internal */\n\n\nfunction decodeData(registry, value) {\n  if (!value) {\n    return [undefined, undefined];\n  } else if ((0, _util.isU8a)(value) || (0, _util.isString)(value)) {\n    return decodeDataU8a(registry, (0, _util.u8aToU8a)(value));\n  } // assume we have an Enum or an  object input, handle this via the normal Enum decoding\n\n\n  return [value, undefined];\n}\n/**\n * @name Data\n * @description\n * A [[Data]] container with node, raw or hashed data\n */\n\n\nclass Data extends _Enum.default {\n  constructor(registry, value) {\n    super(registry, {\n      None: 'Null',\n      // 0\n      Raw: 'Bytes',\n      // 1\n      // eslint-disable-next-line sort-keys\n      BlakeTwo256: 'H256',\n      // 2\n      Sha256: 'H256',\n      // 3\n      // eslint-disable-next-line sort-keys\n      Keccak256: 'H256',\n      // 4\n      ShaThree256: 'H256' // 5\n\n    }, ...decodeData(registry, value));\n  }\n\n  get asRaw() {\n    return this.value;\n  }\n\n  get asSha256() {\n    return this.value;\n  }\n\n  get isRaw() {\n    return this.index === 1;\n  }\n\n  get isSha256() {\n    return this.index === 3;\n  }\n  /**\n   * @description The encoded length\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   */\n\n\n  toU8a() {\n    if (this.index === 0) {\n      return new Uint8Array(1);\n    } else if (this.index === 1) {\n      // don't add the length, just the data\n      const data = this.value.toU8a(true);\n      const length = Math.min(data.length, 32);\n      const u8a = new Uint8Array(length + 1);\n      u8a.set([data.length + 1], 0);\n      u8a.set(data.subarray(0, length), 1);\n      return u8a;\n    } // otherwise we simply have a hash\n\n\n    const u8a = new Uint8Array(33);\n    u8a.set([this.index + 32], 0);\n    u8a.set(this.value.toU8a(), 1);\n    return u8a;\n  }\n\n}\n\nexports.default = Data;","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/types/primitive/Data.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_util","_Enum","decodeDataU8a","registry","indicator","undefined","length","data","subarray","createType","Error","decodeData","isU8a","isString","u8aToU8a","Data","constructor","None","Raw","BlakeTwo256","Sha256","Keccak256","ShaThree256","asRaw","asSha256","isRaw","index","isSha256","encodedLength","toU8a","Uint8Array","Math","min","u8a","set"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"@polkadot/util\");\n\nvar _Enum = _interopRequireDefault(require(\"../codec/Enum\"));\n\n// Copyright 2017-2020 @polkadot/types authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n/** @internal */\nfunction decodeDataU8a(registry, value) {\n  const indicator = value[0];\n\n  if (!indicator) {\n    return [undefined, undefined];\n  } else if (indicator >= 1 && indicator <= 33) {\n    const length = indicator - 1;\n    const data = value.subarray(1, length + 1); // in this case, we are passing a Raw back (since we have no length)\n\n    return [registry.createType('Raw', data), 1];\n  } else if (indicator >= 34 && indicator <= 37) {\n    return [value.subarray(1, 32 + 1), indicator - 32]; // 34 becomes 2\n  }\n\n  throw new Error(`Unable to decode Data, invalid indicator byte ${indicator}`);\n}\n/** @internal */\n\n\nfunction decodeData(registry, value) {\n  if (!value) {\n    return [undefined, undefined];\n  } else if ((0, _util.isU8a)(value) || (0, _util.isString)(value)) {\n    return decodeDataU8a(registry, (0, _util.u8aToU8a)(value));\n  } // assume we have an Enum or an  object input, handle this via the normal Enum decoding\n\n\n  return [value, undefined];\n}\n/**\n * @name Data\n * @description\n * A [[Data]] container with node, raw or hashed data\n */\n\n\nclass Data extends _Enum.default {\n  constructor(registry, value) {\n    super(registry, {\n      None: 'Null',\n      // 0\n      Raw: 'Bytes',\n      // 1\n      // eslint-disable-next-line sort-keys\n      BlakeTwo256: 'H256',\n      // 2\n      Sha256: 'H256',\n      // 3\n      // eslint-disable-next-line sort-keys\n      Keccak256: 'H256',\n      // 4\n      ShaThree256: 'H256' // 5\n\n    }, ...decodeData(registry, value));\n  }\n\n  get asRaw() {\n    return this.value;\n  }\n\n  get asSha256() {\n    return this.value;\n  }\n\n  get isRaw() {\n    return this.index === 1;\n  }\n\n  get isSha256() {\n    return this.index === 3;\n  }\n  /**\n   * @description The encoded length\n   */\n\n\n  get encodedLength() {\n    return this.toU8a().length;\n  }\n  /**\n   * @description Encodes the value as a Uint8Array as per the SCALE specifications\n   */\n\n\n  toU8a() {\n    if (this.index === 0) {\n      return new Uint8Array(1);\n    } else if (this.index === 1) {\n      // don't add the length, just the data\n      const data = this.value.toU8a(true);\n      const length = Math.min(data.length, 32);\n      const u8a = new Uint8Array(length + 1);\n      u8a.set([data.length + 1], 0);\n      u8a.set(data.subarray(0, length), 1);\n      return u8a;\n    } // otherwise we simply have a hash\n\n\n    const u8a = new Uint8Array(33);\n    u8a.set([this.index + 32], 0);\n    u8a.set(this.value.toU8a(), 1);\n    return u8a;\n  }\n\n}\n\nexports.default = Data;"]},"metadata":{},"sourceType":"script"}