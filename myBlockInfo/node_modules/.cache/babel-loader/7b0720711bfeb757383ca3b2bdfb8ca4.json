{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._erasPoints = _erasPoints;\nexports.erasPoints = erasPoints;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\");\n\nvar _util3 = require(\"./util\"); // Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\n\n\nconst CACHE_KEY = 'eraPoints';\n\nfunction mapValidators({\n  individual\n}) {\n  return [...individual.entries()].filter(([, points]) => points.gt(_util.BN_ZERO)).reduce((result, [validatorId, points]) => {\n    result[validatorId.toString()] = points;\n    return result;\n  }, {});\n}\n\nfunction mapPoints(eras, points) {\n  return eras.map((era, index) => ({\n    era,\n    eraPoints: points[index].total,\n    validators: mapValidators(points[index])\n  }));\n}\n\nfunction _erasPoints(instanceId, api) {\n  return (0, _util2.memo)(instanceId, (eras, withActive) => {\n    if (!eras.length) {\n      return (0, _rxjs.of)([]);\n    }\n\n    const cached = withActive ? [] : eras.map(era => _util2.deriveCache.get(`${CACHE_KEY}-${era.toString()}`)).filter(value => !!value);\n    const remaining = (0, _util3.filterEras)(eras, cached);\n    return !remaining.length ? (0, _rxjs.of)(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe((0, _operators.map)(points => {\n      const query = mapPoints(remaining, points);\n      !withActive && query.forEach(q => _util2.deriveCache.set(`${CACHE_KEY}-${q.era.toString()}`, q));\n      return eras.map(era => cached.find(cached => era.eq(cached.era)) || query.find(query => era.eq(query.era)));\n    }));\n  });\n}\n\nfunction erasPoints(instanceId, api) {\n  return (0, _util2.memo)(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(eras => api.derive.staking._erasPoints(eras, withActive))));\n}","map":{"version":3,"sources":["/home/tmaltus/Documents/BlockChainProjects/dotNetworkBlockInfo/node_modules/@polkadot/api-derive/staking/erasPoints.js"],"names":["Object","defineProperty","exports","value","_erasPoints","erasPoints","_rxjs","require","_operators","_util","_util2","_util3","CACHE_KEY","mapValidators","individual","entries","filter","points","gt","BN_ZERO","reduce","result","validatorId","toString","mapPoints","eras","map","era","index","eraPoints","total","validators","instanceId","api","memo","withActive","length","of","cached","deriveCache","get","remaining","filterEras","query","staking","erasRewardPoints","multi","pipe","forEach","q","set","find","eq","derive","erasHistoric","switchMap"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._erasPoints = _erasPoints;\nexports.erasPoints = erasPoints;\n\nvar _rxjs = require(\"rxjs\");\n\nvar _operators = require(\"rxjs/operators\");\n\nvar _util = require(\"@polkadot/util\");\n\nvar _util2 = require(\"../util\");\n\nvar _util3 = require(\"./util\");\n\n// Copyright 2017-2020 @polkadot/api-derive authors & contributors\n// SPDX-License-Identifier: Apache-2.0\nconst CACHE_KEY = 'eraPoints';\n\nfunction mapValidators({\n  individual\n}) {\n  return [...individual.entries()].filter(([, points]) => points.gt(_util.BN_ZERO)).reduce((result, [validatorId, points]) => {\n    result[validatorId.toString()] = points;\n    return result;\n  }, {});\n}\n\nfunction mapPoints(eras, points) {\n  return eras.map((era, index) => ({\n    era,\n    eraPoints: points[index].total,\n    validators: mapValidators(points[index])\n  }));\n}\n\nfunction _erasPoints(instanceId, api) {\n  return (0, _util2.memo)(instanceId, (eras, withActive) => {\n    if (!eras.length) {\n      return (0, _rxjs.of)([]);\n    }\n\n    const cached = withActive ? [] : eras.map(era => _util2.deriveCache.get(`${CACHE_KEY}-${era.toString()}`)).filter(value => !!value);\n    const remaining = (0, _util3.filterEras)(eras, cached);\n    return !remaining.length ? (0, _rxjs.of)(cached) : api.query.staking.erasRewardPoints.multi(remaining).pipe((0, _operators.map)(points => {\n      const query = mapPoints(remaining, points);\n      !withActive && query.forEach(q => _util2.deriveCache.set(`${CACHE_KEY}-${q.era.toString()}`, q));\n      return eras.map(era => cached.find(cached => era.eq(cached.era)) || query.find(query => era.eq(query.era)));\n    }));\n  });\n}\n\nfunction erasPoints(instanceId, api) {\n  return (0, _util2.memo)(instanceId, (withActive = false) => api.derive.staking.erasHistoric(withActive).pipe((0, _operators.switchMap)(eras => api.derive.staking._erasPoints(eras, withActive))));\n}"]},"metadata":{},"sourceType":"script"}